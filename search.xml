<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这是一个测试用的md文件</title>
    <url>/blog/this-is-a-md-file-for-testing/</url>
    <content><![CDATA[<p>哈哈哈哈哈哈</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发——Http网络编程</title>
    <url>/blog/android-developmenthttp-network-programming/</url>
    <content><![CDATA[<div class="note default">
            <h2 id="Http网络编程"><a href="#Http网络编程" class="headerlink" title="Http网络编程"></a>Http网络编程</h2><p>GET、POST、Upload、Download</p>
          </div>

<a id="more"></a>

<h3 id="Http-s-协议简介"><a href="#Http-s-协议简介" class="headerlink" title="Http(s)协议简介"></a>Http(s)协议简介</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>  HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写。它的发展是万维网协会（World Wide Web Consortium）和Internet工作小组IETF（Internet Engineering Task Force）合作的结果，最终发布了一系列的RFC，RFC 1945定义了HTTP/1.0版本。其中最著名的就是RFC 2616。RFC 2616定义了今天普遍使用的一个版本–HTTP 1.1。<br>  HTTP协议是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示（如文本先于图形）等。<br>  HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型，而且HTTP是一个无状态的协议。</p>
<h4 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h4><ul>
<li><p>简单快速：客户向服务器请求服务时，只需传达请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户端与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>
</li>
<li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>
</li>
<li><p>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。采用这种方式可以节省传输时间。</p>
</li>
<li><p>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大；另一方面，在服务器不需要先前信息时，它的应答就很快。</p>
</li>
<li><p>支持<a href="https://www.cnblogs.com/jingmin/p/6493216.html" target="_blank" rel="noopener">B/S及C/S模式</a></p>
</li>
</ul>
<h4 id="HTTP协议请求消息结构"><a href="#HTTP协议请求消息结构" class="headerlink" title="HTTP协议请求消息结构"></a>HTTP协议请求消息结构</h4><p>  客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908071011_833.png" alt="HTTP报文"></p>
<p>HTTP消息体主要包含以下实质内容（空格和换行也必不可少）：</p>
<ul>
<li>请求方法</li>
<li>URL：统一资源定位符</li>
<li>HTTP请求头部</li>
<li>HTTP请求体</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908071011_756.png" alt="报文格式"></p>
<h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">GET</td>
<td align="center">请求指定的页面信息，并返回实体主体</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">HEAD</td>
<td align="center">类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">POST</td>
<td align="center">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立或已有资源的修改</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">PUT</td>
<td align="center">从客户端向服务器传送的数据取代指定的文档的内容</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">DELETE</td>
<td align="center">请求服务器删除指定的页面</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">CONNECT</td>
<td align="center">HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">OPTIONS</td>
<td align="center">允许客户端查看服务器的性能</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">TRACE</td>
<td align="center">回显服务器收到的请求，主要用于测试或诊断。</td>
</tr>
</tbody></table>
<h4 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h4><p>HTTP的响应同样分为：响应行、响应头和响应体。</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908071030_706.png" alt="HTTP响应头"></p>
<h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>  HTTP的状态码由三位数字组成，第一个数字定义了响应的类别，共有5种类别：</p>
<ul>
<li>1xx：指示信息 — 表示请求已接收，继续处理</li>
<li>2xx：成功 — 表示请求已被成功接收、理解、接受</li>
<li>3xx：重定向 — 要完成请求必须进行更进一步的操作</li>
<li>4xx：客户端错误 — 请求有语法错误或请求无法实现</li>
<li>5xx：服务器端错误 — 服务器未能实现合法的请求</li>
</ul>
<h4 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h4><ul>
<li>200 OK：客户端请求成功</li>
<li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthorized：请求未经授权，这个状态代码必须和<code>WWW-Authenticate</code>报头域一起使用</li>
<li>403 Forbidden：服务器收到请求，但是拒绝提供服务</li>
<li>404 Not Found：请求资源不存在，不如：输入了错误的URL</li>
<li>500 Internal Server Error：服务器发生不可预期的错误</li>
<li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</li>
<li>更多状态码见：<a href="http://tools.jb51.net/table/http_status_code" target="_blank" rel="noopener">HTTP响应码大全</a></li>
</ul>
<blockquote>
<p>参考：<a href="http://cloverkim.com/http-protocol.html" target="_blank" rel="noopener">HTTP协议详解|幸运四叶草</a></p>
</blockquote>
<h4 id="GET-请求和-POST-请求的区别"><a href="#GET-请求和-POST-请求的区别" class="headerlink" title="GET 请求和 POST 请求的区别"></a>GET 请求和 POST 请求的区别</h4><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul>
<li>GET请求：请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分隔URL和传输数据，多个参数用&amp;进行连接；如果数据是英文字母/数组，原样发送，如果是空格，则转换为+，如果是中文/其他字符，则直接把字符串用base64进行加密。</li>
<li>POST请求：把提交的数据放置在是HTTP包的包体中。因此，GET请求的数据会在地址栏中显示出来；而POST请求，地址栏不会改变。</li>
</ul>
<h5 id="实际开发中传输大小存在的限制"><a href="#实际开发中传输大小存在的限制" class="headerlink" title="实际开发中传输大小存在的限制"></a>实际开发中传输大小存在的限制</h5><ul>
<li>GET：特定浏览器和服务器对URL长度有限制，例如IE对URL长度的限制是2083字节（2K + 35）。对于其他浏览器，如FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。因此对于GET请求时，传输数据就会受到URL长度的限制。</li>
<li>POST：由于不是通过URL传值，理论上数据不受限制。但实际各个web服务器会规定对POST请求数据大小进行限制，Apache、IIS6都有各自的配置。</li>
</ul>
<h5 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h5><p>  POST的安全性要比GET的安全性高。比如：GET提交数据，用户名和密码将以明文的形式出现在URL上，因为①登录页面有可能被浏览器缓存；②其他人查看浏览器的历史记录；除此之外，使用GET提交数据还可能会造成 Cross-site request forgery 攻击。</p>
<h3 id="Android-原生Http方法访问网络"><a href="#Android-原生Http方法访问网络" class="headerlink" title="Android 原生Http方法访问网络"></a>Android 原生Http方法访问网络</h3><h4 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h4><div id="flowchart-0" class="flow-chart"></div>

<h5 id="在-Manifest-中写明权限"><a href="#在-Manifest-中写明权限" class="headerlink" title="在 Manifest 中写明权限"></a>在 Manifest 中写明权限</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="新建子线程"><a href="#新建子线程" class="headerlink" title="新建子线程"></a>新建子线程</h5><p>在子线程中运行网络下载服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//	<span class="doctag">TODO:</span>Download files from server.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h5 id="建立URL对象"><a href="#建立URL对象" class="headerlink" title="建立URL对象"></a>建立URL对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://valpha.xyz/testserver/noByBy.mp3"</span>);</span><br><span class="line"><span class="comment">//	传入的类型为String的URL链接</span></span><br></pre></td></tr></table></figure>

<h5 id="建立-Http-s-URLConnection-对象"><a href="#建立-Http-s-URLConnection-对象" class="headerlink" title="建立 Http(s)URLConnection 对象"></a>建立 Http(s)URLConnection 对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpsURLConnection conn = (HttpsUrlConnection) url.openConnection();</span><br><span class="line">HttpURLConnection conn = (HttpUrlConnection) url.openConnection();</span><br><span class="line"><span class="comment">//	http与https协议的类是不同的，需要分别使用</span></span><br></pre></td></tr></table></figure>

<div class="note primary">
            <p>在Android 9.0中（API 28），系统默认不支持非HTTPS的协议，想要使用不安全的HTTP协议需要在<code>Manifest</code>中设置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">	android:usesCleartextTraffic=<span class="string">"true"</span></span><br><span class="line">	...</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure>
          </div>

<h5 id="设置-Connection-参数属性（即-Request-的属性）"><a href="#设置-Connection-参数属性（即-Request-的属性）" class="headerlink" title="设置 Connection 参数属性（即 Request 的属性）"></a>设置 Connection 参数属性（即 Request 的属性）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	设置使用"GET"请求</span></span><br><span class="line">conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line"><span class="comment">//	设置超时时间为5000ms</span></span><br><span class="line">conn.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//	设置请求附加属性(key,value)</span></span><br><span class="line">connection.setRequestProperty(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">"password"</span>,<span class="string">"123456"</span>);</span><br></pre></td></tr></table></figure>

<h5 id="获得-ResponseCode（即发送请求）"><a href="#获得-ResponseCode（即发送请求）" class="headerlink" title="获得 ResponseCode（即发送请求）"></a>获得 ResponseCode（即发送请求）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> code = connection.getResponseCode();</span><br><span class="line"><span class="keyword">if</span> (<span class="number">200</span> == code)&#123;</span><br><span class="line">    <span class="comment">//	<span class="doctag">TODO:</span> Anything you want to do like download files</span></span><br><span class="line">    saveFileToLocal(connection.getInputStream());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//	Wrong code. Request failed. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="从网络流中下载文件"><a href="#从网络流中下载文件" class="headerlink" title="从网络流中下载文件"></a>从网络流中下载文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveFileToLocal</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//	实例化一个文件对象</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), <span class="string">"file.name"</span>);</span><br><span class="line">    <span class="comment">//	打开写入文件的流</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    <span class="comment">//	当前获取到的长度</span></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//	缓存区大小</span></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">//	从网络流中读取数据流至缓存区，length为实际读取到的长度</span></span><br><span class="line">    <span class="keyword">while</span>((length = in.read(buffer, <span class="number">0</span>, <span class="number">1024</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//	将缓存区中的数据流写入本地文件</span></span><br><span class="line">        <span class="comment">//	重要！此处必须设定长度为读取到的实际长度</span></span><br><span class="line">        <span class="comment">//	否则会写入非常多的空区域</span></span><br><span class="line">        fileOutputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//	本地文件写入完毕后需要关闭本地文件流（真正写入本地文件）</span></span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>在将数据从缓存写入本地文件中时，必须指定写入长度，不然会默认写入全部缓冲区大小，而缓冲区大小固定长度为1024，会导致文件错误！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fileOutputStream.write(buffer, <span class="number">0</span>, length);</span><br></pre></td></tr></table></figure>
          </div>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p> 使用官方的 <strong>HttpURLConnection</strong> 较为繁琐，需要先新建 <strong>URL</strong> 对象，然后通过 <strong>URL</strong> 实例打开 <strong>Connection</strong> ，再对 <strong>Connection</strong> 设置<code>Request</code>属性，再获取<code>RequestCode</code>和<code>RequestBody</code>，然后通过<strong>流处理</strong>，将<strong>网络数据流</strong>写入<strong>本地文件</strong>。</p>
<p>Coding 时需要保持逻辑清晰，条理清楚，不然很容易写错。接下来介绍使用开源框架访问 Http 的方法。</p>
<h3 id="使用开源框架访问-HTTP"><a href="#使用开源框架访问-HTTP" class="headerlink" title="使用开源框架访问 HTTP"></a>使用开源框架访问 HTTP</h3><h4 id="开源框架——OkHttp"><a href="#开源框架——OkHttp" class="headerlink" title="开源框架——OkHttp"></a>开源框架——OkHttp</h4><p>OkHttp 是一个优秀的网络请求框架，不仅可以手动创建子线程发送同步请求，也可以自动发送异步请求。通过构建者模式生成统一的请求对象，不用区分Http还是Https，效率高且方便快捷。</p>
<p><a href="http://square.github.io/okhttp/" target="_blank" rel="noopener">okhttp | Github.com</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在<code>build.gradle</code>中写入依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">"com.squareup.okhttp3:okhttp:3.4.1"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><div id="flowchart-1" class="flow-chart"></div>

<h5 id="创建-OkHttpClient-对象"><a href="#创建-OkHttpClient-对象" class="headerlink" title="创建 OkHttpClient 对象"></a>创建 <strong>OkHttpClient</strong> 对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">    .connectTimeout(<span class="number">5</span>, TimeUnit.SECONDS)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>



<h5 id="创建-Request-对象"><a href="#创建-Request-对象" class="headerlink" title="创建 Request 对象"></a>创建 <strong>Request</strong> 对象</h5><blockquote>
<p> 构造者模式：将需要构建的属性通过<code>.XXX(“XXX”)</code>设置，最后<code>.build()</code>生成 <strong>Request</strong> 对象</p>
</blockquote>
<ul>
<li><strong>GET</strong> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">    .url(<span class="string">"https://valpha.xyz/testserver/loginget.php?username=zhangsan&amp;password=123456"</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>POST</strong> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RequestBody requestBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">        .add(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>)</span><br><span class="line">        .add(<span class="string">"password"</span>, <span class="string">"123456"</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">"https://valpha.xyz/testserver/loginpost.php"</span>)</span><br><span class="line">        .post(requestBody)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>POST</strong> 上传文件 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);</span><br><span class="line">File file = <span class="keyword">new</span> File(path, <span class="string">"vimHotKeys.png"</span>);</span><br><span class="line"></span><br><span class="line">RequestBody body = <span class="keyword">new</span> MultipartBody.Builder()</span><br><span class="line">        .addFormDataPart(<span class="string">"file"</span>, <span class="string">"vimHotKeys.png"</span>, RequestBody.create(MediaType.parse(<span class="string">"image/png"</span>), file))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">"https://valpha.xyz/testserver/upload_file.php"</span>)</span><br><span class="line">        .post(body)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>

<ul>
<li>下载文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">        .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">        .readTimeout(<span class="number">20</span>, TimeUnit.SECONDS)</span><br><span class="line">        .writeTimeout(<span class="number">120</span>, TimeUnit.SECONDS)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(<span class="string">"https://valpha.xyz/testserver/noByBy.mp3"</span>)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>



<h5 id="Client-发起连接请求，并获取-Response-对象加载结果"><a href="#Client-发起连接请求，并获取-Response-对象加载结果" class="headerlink" title="Client 发起连接请求，并获取 Response 对象加载结果"></a><strong>Client</strong> 发起连接请求，并获取 <strong>Response</strong> 对象加载结果</h5><p>发起连接分为两种：<strong>同步请求</strong>和<strong>异步请求</strong></p>
<ul>
<li>同步请求<code>client.newCall(request).execute();</code>，需要自己写在子线程中运行。并对<strong>Response</strong>自行处理 <strong>Response</strong> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            Response response = client.newCall(request).execute();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">//	<span class="doctag">TODO:</span>Do something with response.body()</span></span><br><span class="line">                ResponseBody responseBody = response.body();</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<ul>
<li>异步请求<code>client.newCall(request).enqueue();</code>，自动调用子线程，不需要手动写入子线程中，但需要实现一个 <strong>Callback</strong> 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callback responseCallback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>Do something when requestCall failed </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>Do something with response.body()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">client.newCall(request).enqueue(responseCallback);</span><br></pre></td></tr></table></figure>

<p>回调结果中，可以使用<code>response.isSuccessful</code> 来判断是否成功（等价于 <code>responseCode == 200</code>）<br>成功后使用<code>response.body()</code>来获取返回的报文本体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseBody responseBody = response.body();</span><br><span class="line">InputStream in = responseBody.byteStream();</span><br><span class="line"><span class="comment">// 使用网络流下载文件</span></span><br></pre></td></tr></table></figure>

<p>—<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">start=>start: 注明权限，并且在子线程中执行网络操作
op1=>operation: 建立 URL 对象
op2=>operation: 创建 Http(s)URLConnection 对象
op3=>operation: 对 Connection 对象设置各种属性
op4=>condition: 获得 ResponseCode 
ResponseCode == 200？
op5=>operation: 获得返回的文件流 (InputStream)
OK=>end: 成功
ERROR=>end: 失败
start->op1->op2->op3->op4
op4(yes)->op5->OK
op4(no)->ERROR</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">start=>start: 创建 OkHttpClient 对象
end=>end: 成功
op1=>operation: 利用 Request.Builder() 
创建一个 Request 对象
op2=>operation: 使用 Client 调用 newCall(Request) 方法
返回一个 Response 对象
op3=>operation: 对 Response 对象进行操作
start->op1->op2->op3->end</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 开源框架</title>
    <url>/blog/android-open-source-framework/</url>
    <content><![CDATA[<div class="note default">
            <h2 id="Android-开源框架"><a href="#Android-开源框架" class="headerlink" title="Android 开源框架"></a>Android 开源框架</h2>
          </div>

<a id="more"></a>

<h3 id="OKHTTP——开源HTTP，替换HttpURLConnection"><a href="#OKHTTP——开源HTTP，替换HttpURLConnection" class="headerlink" title="OKHTTP——开源HTTP，替换HttpURLConnection"></a>OKHTTP——开源HTTP，替换HttpURLConnection</h3><blockquote>
<p>HTTP is the way modern applications network. It’s how we exchange data &amp; media. Doing HTTP efficiently makes your stuff load faster and saves bandwidth.</p>
<p>OkHttp is an HTTP client that’s efficient by default:</p>
<ul>
<li>HTTP/2 support allows all requests to the same host to share a socket.</li>
<li>Connection pooling reduces request latency (if HTTP/2 isn’t available).</li>
<li>Transparent GZIP shrinks download sizes.</li>
<li>Response caching avoids the network completely for repeat requests.</li>
</ul>
<p>OkHttp perseveres when the network is troublesome: it will silently recover from common connection problems. If your service has multiple IP addresses OkHttp will attempt alternate addresses if the first connect fails. This is necessary for IPv4+IPv6 and for services hosted in redundant data centers. OkHttp supports modern TLS features (TLS 1.3, ALPN, certificate pinning). It can be configured to fall back for broad connectivity.</p>
<p>Using OkHttp is easy. Its request/response API is designed with fluent builders and immutability. It supports both synchronous blocking calls and async calls with callbacks.</p>
</blockquote>
<p><a href="http://square.github.io/okhttp/" target="_blank" rel="noopener">okhttp | Github.com</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation(<span class="string">"com.squareup.okhttp3:okhttp:3.4.1"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>与Http协议规定的一致，客户端发起request，服务端收到后提供response。</p>
<div id="flowchart-0" class="flow-chart"></div>

<h4 id="编码逻辑"><a href="#编码逻辑" class="headerlink" title="编码逻辑"></a>编码逻辑</h4><ol>
<li><p>创建 <code>OkHttpClient</code> 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建<code>Request</code>对象，并设置URL、Body等其他属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">    .url(<span class="string">"https://valpha.xyz/testserver/loginget.php?username=zhangsan&amp;password=123456"</span>)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步或异步发送请求，并获取<code>Response</code>对象</p>
<ul>
<li>同步请求<code>client.newCall(request).execute();</code>，需要自己写在子线程中运行。并对<strong>Response</strong>自行处理 **<br><strong>response</strong> 回调结果中，可以使用<code>response.isSuccessful</code> 来判断是否成功（等价于 responseCode == 200）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            Response response = client.newCall(request).execute();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="comment">//	<span class="doctag">TODO:</span>Do something with response.body()</span></span><br><span class="line">                ResponseBody responseBody = response.body();</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>异步请求<code>client.newCall(request).enqueue();</code>，自动调用子线程，不需要手动写入子线程中，但需要实现一个 <strong>Callback</strong> 对象</p>
<p>回调结果中，可以使用<code>response.isSuccessful</code> 来判断是否成功（等价于 <code>responseCode == 200</code>）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Callback responseCallback = <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>Do something when requestCall failed </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span>Do something with response.body()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">client.newCall(request).enqueue(responseCallback);</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功后使用<code>response.body()</code>来获取返回的报文本体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResponseBody responseBody = response.body();</span><br><span class="line">InputStream in = responseBody.byteStream();</span><br><span class="line"><span class="comment">// 使用网络流下载文件</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="EasyPermissions——简化Android权限申请"><a href="#EasyPermissions——简化Android权限申请" class="headerlink" title="EasyPermissions——简化Android权限申请"></a>EasyPermissions——简化Android权限申请</h3><blockquote>
<p>EasyPermissions is a wrapper library to simplify basic system permissions logic when targeting Android M or higher.</p>
</blockquote>
<p><a href="https://github.com/googlesamples/easypermissions" target="_blank" rel="noopener">EasyPermissions | Github.com</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// For developers using AndroidX in their applications</span></span><br><span class="line">    implementation <span class="string">'pub.devrel:easypermissions:3.0.0'</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// For developers using the Android Support Library</span></span><br><span class="line">    implementation <span class="string">'pub.devrel:easypermissions:2.0.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote>
<p>The example below shows how to request permissions for a method that requires both <code>CAMERA</code> and <code>ACCESS_FINE_LOCATION</code>permissions. There are a few things to note:</p>
<ul>
<li>Using <code>EasyPermissions#hasPermissions(...)</code> to check if the app already has the required permissions. This method can take any number of permissions as its final argument.</li>
<li>Requesting permissions with <code>EasyPermissions#requestPermissions</code>. This method will request the system permissions and show the rationale string provided if necessary. The request code provided should be unique to this request, and the method can take any number of permissions as its final argument.</li>
<li>Use of the <code>AfterPermissionGranted</code> annotation. This is optional, but provided for convenience. If all of the permissions in a given request are granted, <em>all</em> methods annotated with the proper request code will be executed(be sure to have an unique request code). The annotated method needs to be <em>void</em> and <em>without input parameters</em> (instead, you can use <em>onSaveInstanceState</em> in order to keep the state of your suppressed parameters). This is to simplify the common flow of needing to run the requesting method after all of its permissions have been granted. This can also be achieved by adding logic on the <code>onPermissionsGranted</code> callback.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterPermissionGranted</span>(RC_CAMERA_AND_LOCATION)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodRequiresTwoPermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] perms = &#123;Manifest.permission.CAMERA, Manifest.permission.ACCESS_FINE_LOCATION&#125;;</span><br><span class="line">    <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="keyword">this</span>, perms)) &#123;</span><br><span class="line">        <span class="comment">// Already have permission, do the thing</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Do not have permissions, request them now</span></span><br><span class="line">        EasyPermissions.requestPermissions(<span class="keyword">this</span>, getString(R.string.camera_and_location_rationale),</span><br><span class="line">                RC_CAMERA_AND_LOCATION, perms);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Or for finer control over the rationale dialog, use a <code>PermissionRequest</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EasyPermissions.requestPermissions(</span><br><span class="line">        <span class="keyword">new</span> PermissionRequest.Builder(<span class="keyword">this</span>, RC_CAMERA_AND_LOCATION, perms)</span><br><span class="line">                .setRationale(R.string.camera_and_location_rationale)</span><br><span class="line">                .setPositiveButtonText(R.string.rationale_ask_ok)</span><br><span class="line">                .setNegativeButtonText(R.string.rationale_ask_cancel)</span><br><span class="line">                .setTheme(R.style.my_fancy_style)</span><br><span class="line">                .build());</span><br></pre></td></tr></table></figure>

<p>Optionally, for a finer control, you can have your <code>Activity</code> / <code>Fragment</code> implement the <code>PermissionCallbacks</code> interface.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">EasyPermissions</span>.<span class="title">PermissionCallbacks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Forward results to EasyPermissions</span></span><br><span class="line">        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionsGranted</span><span class="params">(<span class="keyword">int</span> requestCode, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Some permissions have been granted</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPermissionsDenied</span><span class="params">(<span class="keyword">int</span> requestCode, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Some permissions have been denied</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用<code>EasyPermissions#hasPermissions(...)</code>来检查是否存在权限</p>
<p>使用<code>EasyPermissions#requestPermissions</code>来申请权限</p>
<p>使用<code>@AfterPermissionGranted(...)</code>注释来标记获取权限后要执行的命令</p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">   start=>start: 创建 OkHttpClient 对象
   end=>end: 成功
   op1=>operation: 利用 Request.Builder() 
   创建一个 Request 对象
   op2=>operation: 使用 Client 调用 newCall(Request) 方法
   返回一个 Response 对象
   op3=>operation: 对 Response 对象进行操作
   start->op1->op2->op3->end</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发——六大布局绘制</title>
    <url>/blog/android-developmentsix-layouts/</url>
    <content><![CDATA[<div class="note default">
            <h2 id="Android-六大布局绘制"><a href="#Android-六大布局绘制" class="headerlink" title="Android 六大布局绘制"></a>Android 六大布局绘制</h2>
          </div>

<p><strong>线性布局</strong>、<strong>约束布局*</strong>、<strong>相对布局</strong>、<strong>帧布局</strong>、表格布局、网格布局</p>
<a id="more"></a>

<h3 id="共通属性"><a href="#共通属性" class="headerlink" title="共通属性"></a>共通属性</h3><h4 id="布局宽度和高度-width、height"><a href="#布局宽度和高度-width、height" class="headerlink" title="布局宽度和高度(width、height)"></a>布局宽度和高度(width、height)</h4><ul>
<li><code>layout_width</code>：布局的宽度</li>
<li><code>layout_height</code>：布局的高度</li>
</ul>
<p>可选值：</p>
<ul>
<li><code>&quot;match_parent&quot;</code>：继承父系</li>
<li><code>&quot;wrap_content&quot;</code>：包裹内容</li>
<li><code>_dp</code>：固定长度（以dp为单位）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="对齐方式-gravity"><a href="#对齐方式-gravity" class="headerlink" title="对齐方式(gravity)"></a>对齐方式(gravity)</h4><ul>
<li><code>gravity</code>：组件内部元素的对齐方式</li>
<li><code>layout_gravity</code>：组件在父系布局中的对齐方式</li>
</ul>
<p>区别：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041543_497.png" alt=""></p>
<p>可选值：</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>top</td>
<td>Put the object at the top of its container, not changing its size. <br />将对象放在其容器的顶部，不改变其大小.</td>
</tr>
<tr>
<td>bottom</td>
<td>Put the object at the bottom of its container, not changing its size. <br/>将对象放在其容器的底部，不改变其大小.</td>
</tr>
<tr>
<td>left</td>
<td>Put the object at the left edge of its container, not changing its size. <br/>将对象放在其容器的左侧，不改变其大小.</td>
</tr>
<tr>
<td>right</td>
<td>Put the object at the right edge of its container, not changing its size. <br/>将对象放在其容器的右侧，不改变其大小.</td>
</tr>
<tr>
<td>center_vertical</td>
<td>Place object in the vertical center of its container, not changing its size. <br/>将对象纵向居中，不改变其大小. <br/>垂直对齐方式：垂直方向上居中对齐。</td>
</tr>
<tr>
<td>fill_vertical</td>
<td>Grow the vertical size of the object if needed so it completely fills its container. <br/>必要的时候增加对象的纵向大小，以完全充满其容器. <br/>垂直方向填充</td>
</tr>
<tr>
<td>center_horizontal</td>
<td>Place object in the horizontal center of its container, not changing its size. <br/>将对象横向居中，不改变其大小. <br/>水平对齐方式：水平方向上居中对齐</td>
</tr>
<tr>
<td>fill_horizontal</td>
<td>Grow the horizontal size of the object if needed so it completely fills its container. <br/>必要的时候增加对象的横向大小，以完全充满其容器. <br/>水平方向填充</td>
</tr>
<tr>
<td>center</td>
<td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. <br/>将对象横纵居中，不改变其大小.</td>
</tr>
<tr>
<td>fill</td>
<td>Grow the horizontal and vertical size of the object if needed so it completely fills its container. This is the default. <br/>必要的时候增加对象的横纵向大小，以完全充满其容器.</td>
</tr>
<tr>
<td>clip_vertical</td>
<td>Additional option that can be set to have the top and/or bottom edges of the child clipped to its container’s bounds. The clip is based on the vertical gravity: a top gravity clips the bottom edge, a bottom gravity clips the top edge, and neither clips both edges.<br />附加选项，用于按照容器的边来剪切对象的顶部和/或底部的内容. 剪切基于其纵向对齐设置：顶部对齐时，剪切底部；底部对齐时剪切顶部；除此之外剪切顶部和底部.<br />垂直方向裁剪</td>
</tr>
<tr>
<td>clip_horizontal</td>
<td>Additional option that can be set to have the left and/or right edges of the child clipped to its container’s bounds. The clip is based on the horizontal gravity: a left gravity clips the right edge, a right gravity clips the left edge, and neither clips both edges.<br />附加选项，用于按照容器的边来剪切对象的左侧和/或右侧的内容. 剪切基于其横向对齐设置：左侧对齐时，剪切右侧；右侧对齐时剪切左侧；除此之外剪切左侧和右侧.<br />水平方向裁剪</td>
</tr>
</tbody></table>
<h4 id="留白-margin"><a href="#留白-margin" class="headerlink" title="留白(margin)"></a>留白(margin)</h4><ul>
<li><code>margin</code>：整体留白</li>
<li><code>margin*</code>：某一方向的留白（Top、Bottom、Left、Right等）</li>
</ul>
<p>可选值：</p>
<ul>
<li><code>_dp</code>：固定长度（以dp为单位）</li>
</ul>
<h4 id="填补-padding"><a href="#填补-padding" class="headerlink" title="填补(padding)"></a>填补(padding)</h4><ul>
<li><code>padding</code>：整体填补</li>
<li><code>padding*</code>：某一方向的填补（Top、Bottom、Left、Right等）</li>
</ul>
<p>可选值：</p>
<ul>
<li><code>_dp</code>：固定长度（以dp为单位）</li>
</ul>
<p>二者的关系：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041634_353.png" alt="margin和padding"></p>
<h4 id="唯一标识-ID"><a href="#唯一标识-ID" class="headerlink" title="唯一标识(ID)"></a>唯一标识(ID)</h4><ul>
<li><code>id</code>：ID</li>
</ul>
<p>格式：</p>
<ul>
<li><code>&quot;@+id/viewname&quot;</code>：以 <code>@+id/</code>开头，后面跟上此控件的ID</li>
</ul>
<h3 id="线性布局（Linear-Layout）"><a href="#线性布局（Linear-Layout）" class="headerlink" title="线性布局（Linear Layout）"></a>线性布局（Linear Layout）</h3><p>最常用的布局。特点：线性排列</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041640_656.png" alt="按次序排列"></p>
<h4 id="方向-orientation"><a href="#方向-orientation" class="headerlink" title="方向(orientation)"></a>方向(orientation)</h4><ul>
<li><code>orientation</code>：线性布局的方向</li>
</ul>
<p>可选值：</p>
<ul>
<li><code>vertical</code>：垂直方向</li>
<li><code>horizontal</code>：水平方向</li>
</ul>
<h3 id="约束布局（Constraint-Layout）"><a href="#约束布局（Constraint-Layout）" class="headerlink" title="约束布局（Constraint Layout）"></a>约束布局（Constraint Layout）</h3><p>官方推荐的布局。特点：按照约束布局组件</p>
<p>按照边界约束的方式来规划布局，推荐使用 <strong>Design</strong> 方式来拖动约束点。</p>
<p>类似 Autodesk CAD 的约束方式，按照条件来约束组件。</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041728_638.png" alt="歌曲封面+唱片+封面小图+封面倒影"></p>
<ul>
<li>小图使用了四个约束，将四个边约束到了唱片的四个边上，使得小图在唱片图层上居中显示，并且可以随唱片移动</li>
<li>唱片上下边与左侧封面的上下便对齐，使得它垂直居中，然后将左边与封面的左侧约束，并手动设置dp距离，使唱片的中线显示在封面的右边界处。</li>
<li>下侧封面倒影的上边与封面的下边约束在一起，边距设为0dp，左右边与封面的左右边约束在一起，使得封面与倒影水平对齐。</li>
<li>整体的约束布局采用包裹内容的方式，此时只要移动外界的约束布局，即可实现内部组件的整体移动，不会发生错位的情况。</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041727_181.png" alt="绘制蓝图"></p>
<h3 id="相对布局（Relative-Layout）"><a href="#相对布局（Relative-Layout）" class="headerlink" title="相对布局（Relative Layout）"></a>相对布局（Relative Layout）</h3><p>使用相对位置的布局。特点：相对其他组件的布局方式</p>
<p>传统布局，功能上不如约束布局强大，优点是比约束布局便于使用。</p>
<p>采用边对齐</p>
<h3 id="帧布局（Frame-Layout）"><a href="#帧布局（Frame-Layout）" class="headerlink" title="帧布局（Frame Layout）"></a>帧布局（Frame Layout）</h3><p>特点：多个重叠放置在布局左上角，布局内<strong>不可设定各组件的相对关系</strong>。适合前景+背景的组合方式。</p>
<h3 id="表格布局（Table-Layout）"><a href="#表格布局（Table-Layout）" class="headerlink" title="表格布局（Table Layout）"></a>表格布局（Table Layout）</h3><p>不常用</p>
<h3 id="网格布局（Grid-Layout）"><a href="#网格布局（Grid-Layout）" class="headerlink" title="网格布局（Grid Layout）"></a>网格布局（Grid Layout）</h3><p>不常用</p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 常用插件</title>
    <url>/blog/android-studio-common-plugins/</url>
    <content><![CDATA[<div class="note default">
            <h2 id="Android-Studio-常用插件"><a href="#Android-Studio-常用插件" class="headerlink" title="Android Studio 常用插件"></a>Android Studio 常用插件</h2>
          </div>

<a id="more"></a>

<h3 id="Material-Theme-主题"><a href="#Material-Theme-主题" class="headerlink" title="Material Theme 主题"></a>Material Theme 主题</h3><p>一个非常现代化的主题，提供多种配色。</p>
<p>推荐使用 <strong>Oceanic Theme</strong> 主题配色。</p>
<blockquote>
<p>都9012年了，IDE也要跟得上审美啊，不然从何提高效率！</p>
</blockquote>
<h3 id="WakaTime-编码时长统计插件"><a href="#WakaTime-编码时长统计插件" class="headerlink" title="WakaTime 编码时长统计插件"></a>WakaTime 编码时长统计插件</h3><p>一个用于统计近期 Coding 时长的插件。</p>
<p>原理是当你打开 Android Studio IDE 后自动开始计时，并将使用时长发送到 Wakatime 的服务器上。可以通过访问 Wakatime 网站的 DashBoard 来查看自己近期的 Coding 情况。</p>
<blockquote>
<p>装X必备，统计时间必备！</p>
</blockquote>
<p><strong>DashBoard</strong></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041016_477.png" alt="DashBoard"></p>
<p><strong>Embeddable Charts</strong></p>
<p>将近期的Coding Activity 绘制成图标嵌入到网页上。如下图</p>
<figure><embed src="https://wakatime.com/share/@38cd421e-ce71-4c59-8e74-e3073689a30b/0087657d-7992-42d4-b42c-bfeddb5625d9.svg"></embed></figure>
### Alibaba Java代码规范检查

<p>在 Android Studio 中安装 Alibaba 代码规范检查插件，可以方便地进行<strong>代码规范性检查</strong>。</p>
<p>安装插件后，在<code>tools</code>中选择<strong>阿里编码规约</strong>，然后检查<strong>单文件</strong>or<strong>项目工程</strong> 可以得到一个检查报告。</p>
<p>其中<code>Critical</code>级别的报告必须更改，<code>Major</code>的尽量修改。</p>
<p>具体要求看各公司要求。</p>
<h3 id="Rainbow-Brackets-彩虹括号对"><a href="#Rainbow-Brackets-彩虹括号对" class="headerlink" title="Rainbow Brackets 彩虹括号对"></a>Rainbow Brackets 彩虹括号对</h3><p>使你的代码变得更加<strong>绚丽多彩</strong>！</p>
<p>增强在代码为对齐时的可读性，按照色彩去匹配括号对。</p>
<blockquote>
<p>好看就完事了。</p>
</blockquote>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041119_742.png" alt="彩虹括号"></p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发——权限管理</title>
    <url>/blog/android-developmentrights-management/</url>
    <content><![CDATA[<div class="note default">
            <h2 id="Android-权限管理"><a href="#Android-权限管理" class="headerlink" title="Android 权限管理"></a>Android 权限管理</h2>
          </div>

<a id="more"></a>

<p>Android 6.0 (API 23) 之后，Android 系统对权限管理进行了较大的变化。</p>
<table>
<thead>
<tr>
<th>旧版本（小于 6.0 | API23）</th>
<th>新版本（大于等于 6.0 | API23）</th>
</tr>
</thead>
<tbody><tr>
<td>只需要在<code>Manifest</code>中写入权限即可获取权限</td>
<td>不仅要写入<code>Manifest</code>，部分敏感权限需要用户手动确认开启</td>
</tr>
</tbody></table>
<h3 id="静态权限配置"><a href="#静态权限配置" class="headerlink" title="静态权限配置"></a>静态权限配置</h3><p><code>Manifest</code>中加入以下一条权限（拨打电话和外部访问）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--如果不添加动态申请权限的询问，需要用户手动的在设置中开启相应的权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CALL_PHONE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即可在程序设置中看到所申请的权限</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041146_424.png" alt="静态权限配置"></p>
<p>可以在这里手动给予权限。但更明智的方法时使用动态申请权限——在需要使用权限的时候（或程序第一次启动时）检查是否拥有权限，若没有的话则申请权限。</p>
<h3 id="动态申请权限"><a href="#动态申请权限" class="headerlink" title="动态申请权限"></a>动态申请权限</h3><p>首先判断当前的版本，如果 Android 版本高于6.0 (API 23)，那么就需要动态申请权限，否则不需要。</p>
<p>然后使用<code>requestPermissions</code>方法来申请我们需要的权限</p>
<h4 id="官方推荐的写法"><a href="#官方推荐的写法" class="headerlink" title="官方推荐的写法"></a>官方推荐的写法</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907022357_240.png" alt="动态申请拨号权限"></p>
<p>效果：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907030004_636.gif" alt="申请权限通过"></p>
<p><strong>*注意</strong>：这里，第一次点击<strong>deny</strong>，是拒绝权限；第二次点<strong>allow</strong>，是同意了权限，但是并不会拨出电话。第三次点击拨号，此时有了拨号权限，所以才可以拨出电话。这就很蠢，UE需要优化。 在同级添加一个申请权限结果的反馈，利用toast做输出 <img data-src="http://blog-image.pek3b.qingstor.com/201907030022_304.png" alt="查看结果"> 测试结果：</p>
<p> <img data-src="http://blog-image.pek3b.qingstor.com/201907030027_483.gif" alt="带申请权限结果反馈"> </p>
<p>在反馈结果中，如果获得了权限，是可以直接执行意图的，即直接拨号，达到了最佳体验。</p>
<h4 id="开源框架-EasyPermission-的用法"><a href="#开源框架-EasyPermission-的用法" class="headerlink" title="开源框架 EasyPermission 的用法"></a>开源框架 EasyPermission 的用法</h4><p>在 Github 上有很多开源的框架，可以方便开发者快速开发。例如 <strong>EasyPermission</strong>、<strong>FindViewByMe</strong>等等</p>
<p>这里可以使用<strong>EasyPermission</strong>来方便地进行动态权限的申请。</p>
<p><a href="https://github.com/googlesamples/easypermissions" target="_blank" rel="noopener">googlesamples/easypermissions | GitHub</a></p>
<p>官方使用介绍：</p>
<p>先在<code>build.gradle</code>中添加<code>dependencies</code></p>
<p>然后再程序中使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Forward results to EasyPermissions</span></span><br><span class="line">        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img data-src="http://blog-image.pek3b.qingstor.com/201908041202_105.png" alt="安装、使用方法"></p>
<p>获取拨号和写入权限：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  开源权限管理</span></span><br><span class="line"><span class="meta">@AfterPermissionGranted</span>(RC_CALL_PHONE_AND_WRITE_SDCARD)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodRequiresTwoPermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] perms = &#123;Manifest.permission.CALL_PHONE, Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;;</span><br><span class="line">    <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="keyword">this</span>, perms)) &#123;</span><br><span class="line">        <span class="comment">// Already have permission, do the thing</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"已经获取权限啦"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Do not have permissions, request them now</span></span><br><span class="line">        EasyPermissions.requestPermissions(<span class="keyword">this</span>, getString(R.string.camera_and_location_rationale),</span><br><span class="line">                RC_CALL_PHONE_AND_WRITE_SDCARD, perms);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907031435_161.gif" alt="动态权限申请"></p>
<p>方便快捷。</p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发——Android Studio IDE 的配置与安装</title>
    <url>/blog/android-developmentconfiguration-and-installation-of-studio-ide/</url>
    <content><![CDATA[<div class="note default">
            <h2 id="Android-Studio-IDE-的配置与安装"><a href="#Android-Studio-IDE-的配置与安装" class="headerlink" title="Android Studio IDE 的配置与安装"></a>Android Studio IDE 的配置与安装</h2>
          </div>

<a id="more"></a>

<h3 id="下载、安装-Android-Studio-IDE"><a href="#下载、安装-Android-Studio-IDE" class="headerlink" title="下载、安装 Android Studio IDE"></a>下载、安装 Android Studio IDE</h3><h4 id="官网下载-Android-Studio"><a href="#官网下载-Android-Studio" class="headerlink" title="官网下载 Android Studio"></a>官网下载 Android Studio</h4><p><a href="https://developer.android.com/studio/index.html?hl=zh-cn" target="_blank" rel="noopener">Android Studio 官网下载</a></p>
<h4 id="配置SDK"><a href="#配置SDK" class="headerlink" title="配置SDK"></a>配置SDK</h4><p>出于<strong>代码通用性</strong>和<strong>平台统一性</strong>的考虑，SDK版本一律使用<strong>最新的稳定版</strong></p>
<p>目前版本为 <strong>Android Pie（API 28）</strong></p>
<h4 id="设置-gradle"><a href="#设置-gradle" class="headerlink" title="设置 gradle"></a>设置 gradle</h4><p>gradle 是一个自动化构建工具，在语法上是基于Groovy语言的（<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.groovy-lang.org%2F" target="_blank" rel="noopener">Groovy</a> 是一种基于JVM的敏捷开发语言，可以简单的理解为强类型语言java的弱类型版本），在项目管理上是基于Ant和Maven概念的项目自动化建构工具。</p>
<p><a href="https://www.flysnow.org/2016/04/11/android-gradle-getting-started.html" target="_blank" rel="noopener">Android Gradle 入门 | 飞雪无情的博客</a></p>
<p>一般来说，国内无法直接下载 gradle 包，解决方法有三：</p>
<ul>
<li><p>设置代理（翻墙）<br>在 Android Studio 中设置 Proxy<br><img data-src="http://blog-image.pek3b.qingstor.com/201907022123_665.png" alt="设置代理"></p>
</li>
<li><p>使用国内镜像站下载 gradle 包<br>修改<code>build.gradle</code>文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.3'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>使用本地 gradle<br><img data-src="http://blog-image.pek3b.qingstor.com/201907022129_369.png" alt="本地gradle配置"></li>
</ul>
<p>没有翻墙条件的最佳解决方案：</p>
<ol>
<li>新建工程、修改<code>build.gradle</code></li>
<li>gradle 构建完成后，修改方式为使用本地 gradle 包</li>
</ol>
<h4 id="使用-AVD-虚拟设备"><a href="#使用-AVD-虚拟设备" class="headerlink" title="使用 AVD 虚拟设备"></a>使用 AVD 虚拟设备</h4><p>打开 <strong>AVD Manager</strong>， 新建虚拟设备，选择与测试机相匹配的配置：</p>
<ul>
<li>尺寸</li>
<li>分辨率</li>
<li>屏幕密度*</li>
<li>API镜像版本</li>
</ul>
<div class="note info">
            <p>出现 <strong>HAXM</strong> 或 <strong>VT-X</strong> 错误，原因是需要主板开启虚拟设备加速（VT-x），需要进入 <strong>BIOS</strong> 中设置。</p><p>进入方式可以搜索自己的笔记本型号，查询进入 <strong>BIOS</strong> 的方式。</p>
          </div>

<h4 id="利用-adb-进行调试"><a href="#利用-adb-进行调试" class="headerlink" title="利用 adb 进行调试"></a>利用 adb 进行调试</h4><p>ADB：Android Debug Bridge <img data-src="http://blog-image.pek3b.qingstor.com/201907022137_941.png" alt="adb原理"> </p>
<p>常用命令：</p>
<table>
<thead>
<tr>
<th>adb命令</th>
<th>含义</th>
<th>*参数1</th>
<th>*参数2</th>
</tr>
</thead>
<tbody><tr>
<td>start-server</td>
<td>启动连接</td>
<td></td>
<td></td>
</tr>
<tr>
<td>kill-server</td>
<td>断开连接</td>
<td></td>
<td></td>
</tr>
<tr>
<td>install</td>
<td>安装apk包</td>
<td>*.apk</td>
<td></td>
</tr>
<tr>
<td>uninstall</td>
<td>卸载某程序</td>
<td>程序包名(com.xxx[公司名].xxx[项目名])</td>
<td></td>
</tr>
<tr>
<td>push</td>
<td>上传文件</td>
<td>待推送(push)文件</td>
<td>目标（设备）路径</td>
</tr>
<tr>
<td>pull</td>
<td>下载文件</td>
<td>待取回(pull)文件</td>
<td>目标（本地）路径</td>
</tr>
<tr>
<td>shell</td>
<td>进入设备终端</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>进入设备终端后的命令（Linux命令）：</p>
<table>
<thead>
<tr>
<th>Linux命令</th>
<th>含义</th>
<th>参数1</th>
<th>*参数2</th>
</tr>
</thead>
<tbody><tr>
<td>rm</td>
<td>remove|删除</td>
<td>某文件路径</td>
<td></td>
</tr>
<tr>
<td>ls</td>
<td>list|列表</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mv</td>
<td>move|移动（重命名）</td>
<td>原文件</td>
<td>新文件</td>
</tr>
<tr>
<td>cd</td>
<td>change directory|切换目录</td>
<td>路径</td>
<td></td>
</tr>
<tr>
<td>cp</td>
<td>copy|复制</td>
<td>源文件</td>
<td>目标路径</td>
</tr>
<tr>
<td>pm</td>
<td>包管理</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>pm指令</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>install</td>
<td>安装apk包</td>
<td>*.apk</td>
<td>P版本(9.0)只允许安装/data/local/tmp/下的apk包</td>
</tr>
<tr>
<td></td>
<td>-r</td>
<td></td>
<td>强制替换原包（升级更新）</td>
</tr>
<tr>
<td>uninstall</td>
<td>卸载包</td>
<td>包名</td>
<td></td>
</tr>
<tr>
<td>list packages</td>
<td>列出所有安装包</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>-3</td>
<td></td>
<td>列出所有第三方安装包</td>
</tr>
</tbody></table>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android开发</tag>
      </tags>
  </entry>
  <entry>
    <title>一月考核后的第一节课</title>
    <url>/blog/the-first-class-after-january-assessment/</url>
    <content><![CDATA[<p><strong>利用shape画图</strong>、<strong>自定义seekbar</strong>、<strong>从服务器获取数据</strong></p>
<a id="more"></a>

<h3 id="shadow-阴影显示"><a href="#shadow-阴影显示" class="headerlink" title="shadow 阴影显示"></a><strong>shadow</strong> 阴影显示</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#333"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowColor</span>=<span class="string">"#999"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDx</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowDy</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"50sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:shadowRadius</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello World!"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311407_557.png" alt="阴影效果"></p>
<h3 id="shape画图"><a href="#shape画图" class="headerlink" title="shape画图"></a>shape画图</h3><ul>
<li>画线</li>
<li>画椭圆</li>
<li>画矩形</li>
<li>画圆</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311414_138.png" alt=""></p>
<p><code>size</code> 指定尺寸</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311418_955.png" alt=""></p>
<p><code>solid</code> 内部填充颜色</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311419_571.png" alt=""></p>
<p><code>stroke</code> 边缘设计</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311423_742.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311423_284.png" alt=""></p>
<p><code>gradient</code> 渐变设计</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311428_840.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311429_710.png" alt="三种渐变效果"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311428_135.png" alt="type=sweep"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311430_394.png" alt="type=radial"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311431_775.png" alt="type=linear"></p>
<p><code>Layer-list</code> 组合多图形</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311442_740.png" alt="设计同心圆的代码"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907311442_375.png" alt="同心圆"></p>
<h3 id="ShapeSelector"><a href="#ShapeSelector" class="headerlink" title="ShapeSelector"></a>ShapeSelector</h3><hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day16</title>
    <url>/blog/day-16/</url>
    <content><![CDATA[<div class="note default">
            
          </div>

<p>*<em>Fragment *</em>使用</p>
<p><strong>项目环境搭建</strong></p>
<p><strong>实现功能：</strong></p>
<ul>
<li>“播放歌曲”界面的UI</li>
<li>播放列表</li>
<li>正在播放</li>
<li>点击列表切换</li>
<li>上一曲、下一曲</li>
<li>播放、暂停</li>
</ul>
<a id="more"></a>

<h3 id="RadioGroup-切换状态时更换图片、字体、颜色等"><a href="#RadioGroup-切换状态时更换图片、字体、颜色等" class="headerlink" title="RadioGroup 切换状态时更换图片、字体、颜色等"></a>RadioGroup 切换状态时更换图片、字体、颜色等</h3><p>在页面配置文件中使用动态设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:textColor</span>=<span class="string">"@color/color_selector"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>color_selector.xml</code> 文件中写入标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"#00A779"</span> <span class="attr">android:state_checked</span>=<span class="string">"true"</span> &gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"#FFAF64"</span> <span class="attr">android:state_checked</span>=<span class="string">"false"</span> &gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，在切换的时候可以更改选中时的状态了</p>
<p>切换图片同理，更改 <code>drawable</code>属性即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/drawable_selector"</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="打包同一个样式文件"><a href="#打包同一个样式文件" class="headerlink" title="打包同一个样式文件"></a>打包同一个样式文件</h4><p>指定一个 <code>style</code> 属性，然后在 <code>style</code> 属性中指定样式即可（继承关系）</p>
<h3 id="Fragment-控件案例"><a href="#Fragment-控件案例" class="headerlink" title="Fragment 控件案例"></a>Fragment 控件案例</h3><p>继承于 <strong>Activity</strong> </p>
<p>将一个 <strong>Activity</strong> 分割成了多个子 <strong>Fragment</strong></p>
<p>生命周期类似于 <strong>Activity</strong> 但也有不同的地方</p>
<h4 id="创建-Fragment"><a href="#创建-Fragment" class="headerlink" title="创建 Fragment"></a>创建 Fragment</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907221442_956.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907221442_253.png" alt=""></p>
<p>新建完成后会进行 gradle 同步自动生成一些代码，我们可以进行重写</p>
<h4 id="静态加载"><a href="#静态加载" class="headerlink" title="静态加载"></a>静态加载</h4><h4 id="！动态加载"><a href="#！动态加载" class="headerlink" title="！动态加载"></a>！动态加载</h4><p>分四步</p>
<ol>
<li>通过 <code>getSupportFragmentManager</code> 获取到 <code>FragmentManager</code>对象</li>
<li>开启事务，将 <code>Fragment</code> 动态加载至<strong>容器</strong>中</li>
<li>提交事务</li>
</ol>
<h3 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h3><p>利用插件，自动检查阿里巴巴Java规范</p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day14-15</title>
    <url>/blog/day-1415/</url>
    <content><![CDATA[<p><strong>如何设计框架结构以及MVC模式</strong><br><strong>如何提交代码与更新</strong></p>
<ul>
<li><p>gerrit</p>
</li>
<li><p>redmine</p>
</li>
</ul>
<a id="more"></a>

<h3 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h3><p>需求依赖接口——依赖文档</p>
<p>提供对外接口——</p>
<ul>
<li>类图</li>
<li>时序图<br>核心功能 (User Case)</li>
<li>依赖接口</li>
<li>对外接口</li>
</ul>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day13</title>
    <url>/blog/day-13/</url>
    <content><![CDATA[<p><strong>Intent 案例补充——短信收发器</strong></p>
<p><strong>Activity 的任务堆栈与其生命周期</strong></p>
<a id="more"></a>

<h3 id="短信发送器案例"><a href="#短信发送器案例" class="headerlink" title="短信发送器案例"></a>短信发送器案例</h3><h3 id="Activity的四种启动方式"><a href="#Activity的四种启动方式" class="headerlink" title="Activity的四种启动方式"></a>Activity的四种启动方式</h3><h4 id="默认堆栈模式"><a href="#默认堆栈模式" class="headerlink" title="默认堆栈模式"></a>默认堆栈模式</h4><p>每一次启动界面都会新生成一个新的Activity</p>
<p>启动多少起就要返回多少次</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171612_830.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171508_519.gif" alt="启动多个Activity"></p>
<h4 id="SingleTop-模式"><a href="#SingleTop-模式" class="headerlink" title="SingleTop 模式"></a>SingleTop 模式</h4><p>栈顶复用模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    android:name=<span class="string">".Main2Activity"</span></span><br><span class="line">    android:launchMode=<span class="string">"singleTop"</span> /&gt;</span><br></pre></td></tr></table></figure>



<p>保持<strong>栈顶</strong>的 Activity 唯一</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171613_668.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171520_366.gif" alt="栈顶 Activity 唯一性"></p>
<p>注意，此处只保持<strong>栈顶</strong>的 Activity 唯一，并不会使栈中的 Activity 唯一</p>
<p>如果界面存在互相调用的关系，则无法保持 Activity 的唯一性</p>
<p> <img data-src="http://blog-image.pek3b.qingstor.com/201907171522_813.gif" alt="互相调用导致了多 Activity"></p>
<div class="note info">
            <p>即：SingleTop 模式可以保证同一 Activity 不会连续出现</p>
          </div>



<h4 id="SingleTask-模式"><a href="#SingleTask-模式" class="headerlink" title="SingleTask 模式"></a>SingleTask 模式</h4><p>栈内复用模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    android:name=<span class="string">".Main2Activity"</span></span><br><span class="line">    android:launchMode=<span class="string">"singleTask"</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>如图：保证了 <strong>Activity</strong> 只能出现一次，只要在堆栈内出现了这个 <strong>Task</strong>，就不会构建新的 <strong>Activity</strong>，每一次调用为<strong>退栈</strong></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171613_232.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171527_477.gif" alt="保持 Activity 永远唯一"></p>
<div class="note warning">
            <p>即：启动 SingleTask 的 Activity 时，操作为退栈</p><p><img data-src="http://blog-image.pek3b.qingstor.com/201907171559_810.gif" alt="在点击了启动界面2后，再点返回，发现只有一个界面1，可想而知，操作为退栈"></p>
          </div>

<h4 id="SingleInstance-模式"><a href="#SingleInstance-模式" class="headerlink" title="SingleInstance 模式"></a>SingleInstance 模式</h4><p>全局唯一模式（栈外单例模式）</p>
<p>与 SingleTask 的区别是，这种模式的 Activity 会单独占用一个 Task 栈，具有全局唯一性</p>
<p>而且没有退栈的操作（因为不用同一个任务栈）</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171614_873.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171602_809.gif" alt="在启动界面2之前和之后都启动了若干个界面1，在返回时这前后创建的界面数叠加了"></p>
<h3 id="Activity-的生命周期"><a href="#Activity-的生命周期" class="headerlink" title="Activity 的生命周期"></a>Activity 的生命周期</h3><p><img data-src="http://blog-image.pek3b.qingstor.com/201907171608_896.gif" alt=""></p>
<div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LifeCycle"</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//  全局变量适合放在onCreate里面，只运行一次，除非进程被终止</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    Log.d(TAG, <span class="string">"-----onCreate: "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//  onRestart、onCreate之后一定跟着onStart</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"-----onStart: "</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//  onStart之后一定跟着onResume</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"-----onResume: "</span>);</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//  onPause时是不可操作界面的</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"-----onPause: "</span>);</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"-----onStop: "</span>);</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"-----onRestart: "</span>);</span><br><span class="line">    <span class="keyword">super</span>.onRestart();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"-----onDestroy: "</span>);</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>



<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171641_467.gif" alt=""></p>
<h3 id="Android-主题切换"><a href="#Android-主题切换" class="headerlink" title="Android 主题切换"></a>Android 主题切换</h3><p>通过修改样式文件，来更改app的显示效果</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907171644_767.png" alt="样式文件在res的Value目录下"></p>
<p>写法与网页前端的写法一致</p>
<p>两种继承方式：</p>
<h4 id="“-”继承"><a href="#“-”继承" class="headerlink" title="“.”继承"></a>“.”继承</h4><h4 id="“parent”属性继承"><a href="#“parent”属性继承" class="headerlink" title="“parent”属性继承"></a>“parent”属性继承</h4><h3 id="mediaPlayer音乐播放器的案例"><a href="#mediaPlayer音乐播放器的案例" class="headerlink" title="mediaPlayer音乐播放器的案例"></a>mediaPlayer音乐播放器的案例</h3><p><img data-src="http://blog-image.pek3b.qingstor.com/201907171726_379.png" alt="mediaPlayer 的生命周期"></p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day12</title>
    <url>/blog/internship-day12/</url>
    <content><![CDATA[<h2 id="多界面切换、利用意图调用"><a href="#多界面切换、利用意图调用" class="headerlink" title="多界面切换、利用意图调用"></a><strong>多界面切换、利用意图调用</strong></h2><a id="more"></a>

<h3 id="在一个APP中使用多个界面"><a href="#在一个APP中使用多个界面" class="headerlink" title="在一个APP中使用多个界面"></a>在一个APP中使用多个界面</h3><h4 id="创建新的-Activity"><a href="#创建新的-Activity" class="headerlink" title="创建新的 Activity"></a>创建新的 Activity</h4><p>在一个工程中新建一个界面</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161349_595.png" alt="新建一个Activity"></p>
<p>新建界面之后会生成一个<strong>新类</strong>、<strong>新的布局</strong></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161352_397.png" alt="自动生成的文件"></p>
<p>并且会改写<code>Manifest</code>文件</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161353_40.png" alt="新生成的Activity放置在初始的Activity之前"></p>
<p>在启动时，默认打开最上层的界面</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161356_803.png" alt="没有 HelloWorld! 字样，说明是后生成的界面"></p>
<p>而且会生成双APP，进不同的app可以打开两个不同的界面</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161357_632.gif" alt="双生app"></p>
<h4 id="通过设置Manifest文件修改app名称"><a href="#通过设置Manifest文件修改app名称" class="headerlink" title="通过设置Manifest文件修改app名称"></a>通过设置<code>Manifest</code>文件修改app名称</h4><p>遵守 <strong>XML</strong>语法，有以下两种修改名称的方式</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161401_370.png" alt="Manifest修改label设置"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161402_151.png" alt="strings.xml文件，在res目录下"></p>
<h4 id="利用ImageAssert生成图标"><a href="#利用ImageAssert生成图标" class="headerlink" title="利用ImageAssert生成图标"></a>利用<code>ImageAssert</code>生成图标</h4><p>打开 <strong>ImageAssert</strong></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161408_707.png" alt="File-&gt;Image Assert"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161407_894.png" alt="生成自己的图标"></p>
<p>效果</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161409_413.png" alt=""></p>
<h3 id="Intent（意图）的使用"><a href="#Intent（意图）的使用" class="headerlink" title="Intent（意图）的使用"></a>Intent（意图）的使用</h3><p>利用意图，启动多界面</p>
<h4 id="界面准备"><a href="#界面准备" class="headerlink" title="界面准备"></a>界面准备</h4><p>绘制UI</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161420_653.png" alt="主界面"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161420_715.png" alt="第二个界面"></p>
<h4 id="显式意图"><a href="#显式意图" class="headerlink" title="显式意图"></a>显式意图</h4><h5 id="显式意图启动Main2界面"><a href="#显式意图启动Main2界面" class="headerlink" title="显式意图启动Main2界面"></a>显式意图启动Main2界面</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startMain2</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  显式意图启动Main2界面</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, Main2Activity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161426_975.gif" alt="启动多界面"></p>
<h5 id="显示意图启动其他app的界面"><a href="#显示意图启动其他app的界面" class="headerlink" title="显示意图启动其他app的界面"></a>显示意图启动其他app的界面</h5><p>前提是知道其它要启动的app的包名和界面，必须要精确，否则无法启动导致报错。</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161444_165.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161447_168.gif" alt="启动了其他app的界面"></p>
<h4 id="隐式意图"><a href="#隐式意图" class="headerlink" title="隐式意图"></a>隐式意图</h4><h5 id="筛选意图"><a href="#筛选意图" class="headerlink" title="筛选意图"></a>筛选意图</h5><p>在<code>Manifest</code>里面设置一下<code>activity</code>的属性——<code>intent-filter</code><strong>意图过滤器</strong>，在主程序中使用<strong>意图过滤器</strong>来筛选使用的意图</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span><br><span class="line">     </span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startMain3</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  使用隐式意图启动Activity</span></span><br><span class="line">    <span class="comment">//  需要知道所要启动的Activity的意图过滤器的Action和Category</span></span><br><span class="line">    <span class="comment">//  Data和Type不是必须的，根据意图需要完全匹配</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setAction(<span class="string">"com.example.action.MAIN3"</span>);</span><br><span class="line">    intent.addCategory(<span class="string">"android.intent.category.DEFAULT"</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要<code>action</code>和<code>category</code>完全一致了，就可以匹配执行意图</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907161549_724.gif" alt=""></p>
<p>如果定义了<code>data</code>则需要把<code>data</code>也进行匹配</p>
<p>常用的方式有：</p>
<ul>
<li>scheme</li>
<li>mimeType</li>
</ul>
<p><code>scheme</code>对应数据格式，<code>mimeType</code>对应数据类型</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;data</span><br><span class="line">    android:mimeType=<span class="string">"mydata/png"</span></span><br><span class="line">    android:scheme=<span class="string">"mydata"</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>这里是既设置了<strong>Data</strong>又设置了<strong>Type</strong>，此时调用需要使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intent.setDataAndType(Uri.parse(<span class="string">"mydata:"</span>+<span class="number">123456</span>), <span class="string">"mydata/png"</span>);</span><br></pre></td></tr></table></figure>

<p>传递过来之后，使用<code>getIntent()</code>获取意图对象</p>
<p>并使用<code>intent.getData()</code>获取通过<code>scheme</code>传递过来的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">String data = intent.getintent.getData().toString();</span><br></pre></td></tr></table></figure>

<h5 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h5><p>除了可以使用<code>scheme</code>传递小型数据外，大型的数据可以使用<code>putExtra(&lt;K&gt;,&lt;V&gt;)</code>的方式来传递键值对</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intent.putExtra(<span class="string">"name"</span>, name);</span><br><span class="line">intent.putExtra(<span class="string">"height"</span>, height);</span><br></pre></td></tr></table></figure>

<p>传送过去之后，可以使用<code>gei&lt;String&gt;Extra</code>来获得数据，<code>String</code>可以根据需求来指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = intent.getStringExtra(<span class="string">"name"</span>);</span><br><span class="line">Float height = intent.getFloatExtra(<span class="string">"height"</span>, <span class="number">0.0f</span>);</span><br></pre></td></tr></table></figure>

<h4 id="显式意图与隐式意图的对比"><a href="#显式意图与隐式意图的对比" class="headerlink" title="显式意图与隐式意图的对比"></a>显式意图与隐式意图的对比</h4><table>
<thead>
<tr>
<th>显式意图</th>
<th>隐式意图</th>
</tr>
</thead>
<tbody><tr>
<td>通过<strong>包名</strong>、<strong>类名</strong>指定启动的Activity</td>
<td>利用<strong>意图过滤器(Intent-Filter)</strong>来指定对应的<strong>Action</strong>、<strong>Category</strong>或<strong>[Data]</strong>来启动Activity<br /><strong>Action</strong>、<strong>Category</strong>为必选，<strong>Data</strong>为可选，但必须要一一对应</td>
</tr>
<tr>
<td>一般开启自己的界面使用<strong>显式意图</strong></td>
<td>启动外部应用使用<strong>隐式意图</strong></td>
</tr>
<tr>
<td>显式意图不用设置过滤器，所以可以避免其他应用开启自己。<strong>相对安全</strong>一些</td>
<td>自己本身需要设置过滤器，可以被外部应用所引用。</td>
</tr>
</tbody></table>
<h4 id="启动意图"><a href="#启动意图" class="headerlink" title="启动意图"></a>启动意图</h4><p>无返回值的启动<strong>意图</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>

<p>带返回值的启动意图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startActivityForResult(intent,requestCode);</span><br></pre></td></tr></table></figure>

<p>想要带返回值，同时也必须传入一个<code>requestCode</code>，用于表示自己的请求码</p>
<h4 id="返回码ResultCode"><a href="#返回码ResultCode" class="headerlink" title="返回码ResultCode"></a>返回码ResultCode</h4><p>返回界面时，可以通过改写<code>onBackPressed</code>函数来改变回传结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra(<span class="string">"main2"</span>, <span class="string">"我是界面2返回的消息"</span>);</span><br><span class="line">    setResult(<span class="number">333</span>, intent);</span><br><span class="line">    <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要实现一个返回界面的按钮，则需要使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">finish();</span><br></pre></td></tr></table></figure>

<p>可以结束当前界面，并返回上一级。作用与返回键相当。</p>
<p>回传来的界面可以通过改写<code>onActivityResult</code>方法来进行改写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, @Nullable Intent data)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"reqcode:"</span>+requestCode+<span class="string">"--"</span>+<span class="string">"rescode:"</span>+resultCode);</span><br><span class="line">    String rststring = data.getStringExtra(<span class="string">"result"</span>);</span><br><span class="line">    <span class="keyword">if</span>(resultCode == Main3Activity.RESULT_CODE_BADSTRING)&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, rststring+<span class="string">"我了个去！"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, rststring, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(requestCode == REQ_CODE_MIAN2)&#123;</span><br><span class="line">        rststring = data.getStringExtra(<span class="string">"main2"</span>);</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"main2返回的消息"</span>+rststring, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(requestCode == REQ_CODE_MIAN3)&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"main3返回的消息"</span>+rststring, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上这些，做到了在<strong>多界面之间切换</strong>并且<strong>传递数据</strong>的功能。</p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day11</title>
    <url>/blog/internship-day11/</url>
    <content><![CDATA[<div class="note default">
            <p>RTM 需求跟踪矩阵</p>
          </div>

<a id="more"></a>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907152217_512.png" alt="需求跟踪矩阵模板"></p>
<p>通过多次对需求矩阵进行更新，并随时查阅矩阵，可以高效地进行开发</p>
<p>以上为用户需求跟踪，针对用户提出的需求，完善该矩阵，并逐个开发实现</p>
<p>用户的需求随时可能变更，每次更新需求都要进行记录，并重置优先级</p>
<p>在某一项需求开发完毕后要进行测试，测试结果需要在需求矩阵中记录</p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>实习日记</tag>
        <tag>需求分析</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day10</title>
    <url>/blog/internship-day10/</url>
    <content><![CDATA[<p><strong>设计模式</strong></p>
<a id="more"></a>

<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="什么是设计模式？"><a href="#什么是设计模式？" class="headerlink" title="什么是设计模式？"></a>什么是设计模式？</h4><p>可重复使用的代码设计经验总结</p>
<h4 id="OO原则"><a href="#OO原则" class="headerlink" title="OO原则"></a>OO原则</h4><ul>
<li>单一职责</li>
<li>不要重复代码</li>
<li>开闭原则——修改关闭、扩展开放</li>
<li>依赖倒置</li>
<li>接口隔离——暴露接口隐藏细节</li>
</ul>
<h3 id="观察者模式（Observer-Pattern）"><a href="#观察者模式（Observer-Pattern）" class="headerlink" title="观察者模式（Observer Pattern）"></a>观察者模式（Observer Pattern）</h3><p>Publisher—Listener模式</p>
<p>也可理解为<strong>订阅者模式</strong>（微信公众号也是也是<strong>订阅者模式</strong>）</p>
<p>结构为一个主的<strong>信息源</strong>，将自己的信息传递给多个<strong>订阅者</strong>，<strong>用户</strong>可以通过<em>泛化</em>来继承订阅者的方法实现特例化。</p>
<p>下图为气象站Demo</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907141151_677.png" alt="气象站的案例"></p>
<p>需要注意的是，<code>Subject</code>中的属性（对象）为<code>List&lt;Object&gt;</code>是对象的集合，用于实现<code>notifyObserver(observers)</code>，将数据推送至各订阅者</p>
<p>每一个对象<code>Observer</code>的属性（对象）为<code>Subject</code>是主题，用于实现<code>update(subject)</code>，从主题方将数据拉去回来</p>
<p><code>Subjec</code> 和 <code>Observer</code>均为接口——<strong>接口分离原则</strong></p>
<p>任意的观察者都可以继承<code>Observer</code>的<code>update()</code>方法，来实现自己的特例化</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p><code>WeatherSubject.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.observerpatterndemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherSubject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Observer.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.observerpatterndemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DisplayElement.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.observerpatterndemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h3 id="MVC模式（Model-View-Controller）"><a href="#MVC模式（Model-View-Controller）" class="headerlink" title="MVC模式（Model-View-Controller）"></a>MVC模式（Model-View-Controller）</h3><p><img data-src="http://blog-image.pek3b.qingstor.com/201907140915_786.png" alt="Model-View-Controller"></p>
<h3 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h3><blockquote>
<p>引自<a href="https://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="noopener">菜鸟教程工厂模式</a></p>
</blockquote>
<ul>
<li>工厂方法模式<strong>一种创建对象的模式</strong>，它被广泛应用在jdk中以及Spring和Struts框架中；</li>
<li>工厂方法模式基于”输入”，<strong>应用在超类和多个子类之间</strong>的情况，这种模式<strong>将创建对象的责任转移到工厂类</strong>；</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907141613_140.png" alt="工厂模式类图"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h5><p><code>Shape.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实现接口的实体类"><a href="#实现接口的实体类" class="headerlink" title="实现接口的实体类"></a>实现接口的实体类</h5><p><code>Rectangle.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Rectangle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Square.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Square::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Circle.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Inside Circle::draw() method."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建工厂类，生成基于给定信息的实体类对象"><a href="#创建工厂类，生成基于给定信息的实体类对象" class="headerlink" title="创建工厂类，生成基于给定信息的实体类对象"></a>创建工厂类，生成基于给定信息的实体类对象</h5><p><code>ShapeFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"RECTANGLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用工厂类，通过传递信息获取实体类对象"><a href="#使用工厂类，通过传递信息获取实体类对象" class="headerlink" title="使用工厂类，通过传递信息获取实体类对象"></a>使用工厂类，通过传递信息获取实体类对象</h5><p><code>FactoryPatternDemo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPatternDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeFactory shapeFactory = <span class="keyword">new</span> ShapeFactory();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">      shape1.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape2 = shapeFactory.getShape(<span class="string">"RECTANGLE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">      shape2.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape3 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">      shape3.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>对于需要获取的对象，可以使用<strong>枚举体</strong>来获取，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Event &#123;</span><br><span class="line">    EVT_OFF,</span><br><span class="line">    EVT_ACC,</span><br><span class="line">    EVT_IGNON,</span><br><span class="line">    EVT_CRANK,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Event.EVT_OFF, Event.EVT_ACC, Event.EVT_IGNON, Event.EVT_CRANK</span><br></pre></td></tr></table></figure>

<p>可以使用<strong>HashMap</strong>来存储<strong>键值对</strong>信息，便于调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	State为自定义的类</span></span><br><span class="line"><span class="comment">//	String为主键、State为值，创建一个新的map</span></span><br><span class="line">HashMap&lt;String, State&gt; map;</span><br></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.get(&lt;Key&gt;);<span class="comment">//	return Value</span></span><br><span class="line"><span class="comment">//	其他方法待补充</span></span><br></pre></td></tr></table></figure>



<h3 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h3><blockquote>
<p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener">单例模式|菜鸟教程</a></p>
</blockquote>
<ul>
<li>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
<li><strong>主要解决：</strong> 一个全局使用的类频繁地创建与销毁。</li>
<li>何时使用：当您想控制实例数目，节省系统资源的时候。</li>
<li>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</li>
<li>关键代码：构造函数是私有的。</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907141640_77.png" alt="单例模式"></p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><h5 id="样例一：Lazy-Load-Thread-Not-Safe"><a href="#样例一：Lazy-Load-Thread-Not-Safe" class="headerlink" title="样例一：Lazy Load, Thread Not Safe"></a>样例一：Lazy Load, Thread Not Safe</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不保险，在多线程同时运行时，一个判断null完毕尚未new出实例时，另一个线程进入判断，如果这样会导致非单例的情况出现</p>
<h5 id="样例二：Lazy-Load-Thread-Safe"><a href="#样例二：Lazy-Load-Thread-Safe" class="headerlink" title="样例二：Lazy Load, Thread Safe"></a>样例二：Lazy Load, Thread Safe</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入关键字<code>synchronized</code>开启线程锁，可以保证线程安全，可是这样会导致效率下降。</p>
<h3 id="组合模式（Composite-Pattern）"><a href="#组合模式（Composite-Pattern）" class="headerlink" title="组合模式（Composite Pattern）"></a>组合模式（Composite Pattern）</h3><blockquote>
<p><a href="https://www.runoob.com/design-pattern/composite-pattern.html" target="_blank" rel="noopener">组合模式|菜鸟教程</a></p>
</blockquote>
<ul>
<li>意图：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</li>
<li><strong>主要解决：</strong>它在我们<strong>树型结构</strong>的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</li>
<li>何时使用<strong>：</strong> 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li>
<li>如何解决：<strong>树枝和叶子实现统一接口，树枝内部组合该接口</strong>。</li>
<li>关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</li>
<li>应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中<strong>（Android）</strong>，对于 Button 和 Checkbox 是树叶，Container 是树枝。</li>
<li>优点： 1、高层模块调用简单。 2、节点自由增加。</li>
<li>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</li>
<li>使用场景：部分、整体场景，如<strong>树形菜单</strong>，<strong>文件、文件夹的管理</strong>。</li>
<li>注意事项：定义时为具体类.</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907141729_890.png" alt="组合模式"></p>
<p>核心就是要实现树枝和叶子接口的统一！以此来统一管理所有的树</p>
<p><strong>数据结构中的树</strong>+<strong>统一的接口</strong>+<strong>内部List属性</strong></p>
<h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>如同<strong>俄罗斯套娃</strong>一般，层层装饰……</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907141808_476.png" alt=""></p>
<p>例如，买<strong>咖啡</strong>时，又要<strong>加糖</strong>又要<strong>加香草</strong>并且还要添<strong>加牛奶</strong>，各种组合使得方法的数量阶乘增长</p>
<p>所以使用一种可以互相调用的<strong>装饰器</strong>来进行多重修饰</p>
<ul>
<li>如何解决：将<strong>具体功能职责划分</strong>，同时<strong>继承装饰者模式</strong>。</li>
<li>关键代码： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。</li>
</ul>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>搬运自菜鸟教程，了解后更新</p>
<p><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener">装饰器模式|菜鸟教程</a></p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>实习日记</tag>
        <tag>设计模式</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day9</title>
    <url>/blog/day-9/</url>
    <content><![CDATA[<p>UML统一建模语言、Git使用、Linux相关</p>
<a id="more"></a>

<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="文件权限问题"><a href="#文件权限问题" class="headerlink" title="文件权限问题"></a>文件权限问题</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907131010_600.png" alt="ls -al"></p>
<p>可得10为二进制数来表示权限：</p>
<ul>
<li>第1位：d为目录、l为链接</li>
<li>第2-4位：文件（夹）持有者的 读、写、运行权限</li>
<li>第5-7位：文件（夹）持有者所在的组的 读、写、运行权限</li>
<li>第8-10位：文件（夹）任何人的 读、写、运行权限</li>
</ul>
<h5 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h5><p><code>chmod +* [文件名]</code></p>
<p>其中*表示所添加的权限</p>
<blockquote>
<p>-rw——- (600)      只有拥有者有读写权限。<br>-rw-r–r– (644)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。<br>-rwx—— (700)     只有拥有者有读、写、执行权限。<br>-rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。<br>-rwx–x–x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。<br>-rw-rw-rw- (666)   所有用户都有文件读、写权限。<br>-rwxrwxrwx (777)  所有用户都有读、写、执行权限。</p>
</blockquote>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>查看可用内存<code>free -m</code></p>
<p>或者<code>cat /proc/meminfo</code></p>
<h3 id="Android-Studio-IDE"><a href="#Android-Studio-IDE" class="headerlink" title="Android Studio IDE"></a>Android Studio IDE</h3><h4 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h4><p>setting中可以包含各个模块</p>
<ul>
<li>app：主应用</li>
<li>common：公共库</li>
<li>……</li>
</ul>
<h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><ul>
<li>用例图 (use case)</li>
<li>类图</li>
<li>时序图</li>
<li>……</li>
</ul>
<h4 id="用例图（Use-Case）"><a href="#用例图（Use-Case）" class="headerlink" title="用例图（Use Case）"></a>用例图（Use Case）</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907131408_695.png" alt="用例图"></p>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><ul>
<li><p>参与者</p>
</li>
<li><p>用例</p>
</li>
</ul>
<h5 id="关系："><a href="#关系：" class="headerlink" title="关系："></a>关系：</h5><ul>
<li>包含(Include)</li>
<li>扩展(Extend)</li>
</ul>
<h4 id="类图（class）"><a href="#类图（class）" class="headerlink" title="类图（class）"></a>类图（class）</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907131433_807.png" alt="类图"></p>
<h5 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h5><ul>
<li>类</li>
<li>接口</li>
<li>成员</li>
</ul>
<h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><p>各种关系的强弱顺序： <strong>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</strong></p>
<ul>
<li>泛化（Generalization）<br>是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化弗雷的所有特征和行为。</li>
<li>实现（Realization）<br>是一种类与接口的关系，表示类是接口所有特征和行为的实现。</li>
<li>关联（Association）<br>是一种拥有的关系，它使一个类知道另一个类的属性和方法。</li>
<li>聚合（Aggregation）<br>是整体与部分的关系，且部分可以离开整体而单独存在。</li>
<li>组合（Composition）<br>是整体与部分的关系，但部分不能离开整体而单独存在。</li>
<li>依赖（Dependency）<br>是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖。</li>
</ul>
<h4 id="时序图（sequence）"><a href="#时序图（sequence）" class="headerlink" title="时序图（sequence）"></a>时序图（sequence）</h4><h5 id="对象-2"><a href="#对象-2" class="headerlink" title="对象"></a>对象</h5><ul>
<li>对象生命线</li>
</ul>
<h5 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h5><ul>
<li>同步消息</li>
<li>异步消息</li>
<li>注释</li>
<li>约束</li>
<li>循环关系</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907131628_397.png" alt="时序图"></p>
<h4 id="Markdown可以画时序图！"><a href="#Markdown可以画时序图！" class="headerlink" title="Markdown可以画时序图！"></a>Markdown可以画时序图！</h4><blockquote>
<p>participant 客户端</p>
<p>participant 服务器</p>
<p>participant 通行证中心</p>
<p>Note over 客户端: 用户输入通行证的账号、密码</p>
<p>客户端-&gt;通行证中心: 发送账号、密码</p>
<p>Note over 通行证中心: 验证账号、密码</p>
<p>通行证中心–&gt;&gt;客户端: 返回token</p>
<p>客户端-&gt;服务器: 发送token</p>
<p>服务器-&gt;通行证中心: 验证token</p>
<p>通行证中心–&gt;&gt;服务器: 验证成功</p>
<p>服务器–&gt;&gt;客户端: 登陆成功</p>
</blockquote>
<p>效果如下，但是无法绘制循环体？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">participant 客户端</span><br><span class="line"></span><br><span class="line">participant 服务器</span><br><span class="line"></span><br><span class="line">participant 通行证中心</span><br><span class="line"></span><br><span class="line">Note over 客户端: 用户输入通行证的账号、密码</span><br><span class="line"></span><br><span class="line">客户端-&gt;通行证中心: 发送账号、密码</span><br><span class="line"></span><br><span class="line">Note over 通行证中心: 验证账号、密码</span><br><span class="line"></span><br><span class="line">通行证中心--&gt;&gt;客户端: 返回token</span><br><span class="line"></span><br><span class="line">客户端-&gt;服务器: 发送token</span><br><span class="line"></span><br><span class="line">服务器-&gt;通行证中心: 验证token</span><br><span class="line"></span><br><span class="line">通行证中心--&gt;&gt;服务器: 验证成功</span><br><span class="line"></span><br><span class="line">服务器--&gt;&gt;客户端: 登陆成功</span><br></pre></td></tr></table></figure>

<h3 id="UML绘图工具"><a href="#UML绘图工具" class="headerlink" title="UML绘图工具"></a>UML绘图工具</h3><ul>
<li>astah</li>
<li>visual paradigm</li>
<li>visio 等绘图工具</li>
</ul>
<p>前两个可以实现逆向工程，从 java 代码中生成类图、时序图✔</p>
<p>而 visio 等工具是纯粹的画图，无法直接导入数据❌</p>
<p>推荐使用 visual paradigm, 操作界面现代化，相对好看，缺点是软件比较大，占用资源相对高。</p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>实习日记</tag>
        <tag>UML</tag>
        <tag>Linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>学生管理系统的实例</title>
    <url>/blog/examples-of-student-management-systems/</url>
    <content><![CDATA[<div class="note default">
            <p>Android开发的实战——学生信息管理系统</p>
          </div>

<p><a href="https://github.com/Valpha/StudentInfoDemo" target="_blank" rel="noopener">StudentInfoDemo——Github</a></p>
<a id="more"></a>

<h3 id="整体规划"><a href="#整体规划" class="headerlink" title="整体规划"></a>整体规划</h3><ol>
<li>整理开发要求</li>
<li>整理关键技术点</li>
<li>设计UI</li>
<li>逻辑代码实现</li>
<li>测试</li>
</ol>
<h3 id="学生管理系统的要求"><a href="#学生管理系统的要求" class="headerlink" title="学生管理系统的要求"></a>学生管理系统的要求</h3><ul>
<li>利用数据库实现对 <strong>学生</strong> { “姓名”、“学号” } 进行管理</li>
<li>需要能实现 <strong>增加</strong>、<strong>删除</strong>、<strong>修改</strong>、<strong>查询</strong> 四个功能<ul>
<li>输入<strong>学生</strong> { “姓名”、“学号” } 信息可以添加到数据库</li>
<li>给出<strong>“姓名”</strong>或<strong>“学号”</strong>或<strong>“姓名”+“学号”</strong>来删除已有的数据信息</li>
<li>给出<strong>“姓名”</strong>和<strong>“学号”</strong>信息，将符合<strong>学号</strong>的数据的姓名修改为给出的<strong>姓名</strong></li>
<li>查询所有存在的数据信息</li>
<li>给定筛选条件，按照指定的<strong>“姓名”</strong>或<strong>“学号”</strong>或<strong>“姓名”+“学号”</strong>来查询数据信息</li>
</ul>
</li>
</ul>
<h3 id="关键技术点"><a href="#关键技术点" class="headerlink" title="关键技术点"></a>关键技术点</h3><h4 id="操作接口"><a href="#操作接口" class="headerlink" title="操作接口"></a>操作接口</h4><ul>
<li>两个输入文本框：{ <strong>姓名</strong>、*<em>学号 *</em> }</li>
<li>四个按钮：{ <strong>插入</strong>、<strong>删除</strong>、<strong>修改</strong>、<strong>查询</strong> }</li>
<li>一个输出列表：( {<strong>姓名</strong>、<strong>学号</strong>}*n )</li>
</ul>
<h4 id="“学生”对象结构"><a href="#“学生”对象结构" class="headerlink" title="“学生”对象结构"></a>“学生”对象结构</h4><p>学生类：{ _ID、姓名、学号 }</p>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ul>
<li>创建数据库</li>
<li>新建数据表单</li>
<li>增加对象</li>
<li>删除对象（姓名、学号、姓名&amp;学号）</li>
<li>修改（按学号修改姓名）</li>
<li>查询（姓名or学号）、（顺序）</li>
</ul>
<h5 id="Android数据库的使用"><a href="#Android数据库的使用" class="headerlink" title="Android数据库的使用"></a>Android数据库的使用</h5><ul>
<li>DBHelper</li>
<li>DB契约类</li>
<li>DBUtils工具类</li>
</ul>
<h3 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h3><h4 id="主布局"><a href="#主布局" class="headerlink" title="主布局"></a>主布局</h4><ul>
<li>垂直线性布局<ul>
<li>两个文本框 <code>EditTest</code></li>
<li>四个按钮 <code>Button</code></li>
<li>查询列表 <code>ListView</code></li>
</ul>
</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111839_171.png" alt="主布局"></p>
<div><div class="fold_hider"><div class="close hider_title">student_item.xml</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/et_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"请输入学生姓名"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/et_stunumber"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"请输入学生学号"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_insert"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"insertStudent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Insert"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_delete"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"deleteStudent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Delete"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_update"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"updateStudent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Update"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/bt_query"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"queryStudent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Query"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/lv_student"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>

<h4 id="ListView子布局"><a href="#ListView子布局" class="headerlink" title="ListView子布局"></a>ListView子布局</h4><ul>
<li>水平线性布局<ul>
<li>_id</li>
<li>姓名</li>
<li>学号</li>
</ul>
</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111840_597.png" alt="Item子布局"></p>
<div><div class="fold_hider"><div class="close hider_title">student_item.xml</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/_id"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"right"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/stunumber"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"stunumber"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>

<h3 id="编码逻辑"><a href="#编码逻辑" class="headerlink" title="编码逻辑"></a>编码逻辑</h3><h4 id="上电初始化"><a href="#上电初始化" class="headerlink" title="上电初始化"></a>上电初始化</h4><div id="flowchart-0" class="flow-chart"></div>

<h4 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h4><h5 id="契约类"><a href="#契约类" class="headerlink" title="契约类"></a>契约类</h5><p>用于存放约定俗成的<strong>常量</strong>信息，可以理解为C语言中的宏定义</p>
<div><div class="fold_hider"><div class="close hider_title">StudentInfoContract</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentInfoContract</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentEntry</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String TABLE_NAME = <span class="string">"student"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String COLUMN_NAME_NAME = <span class="string">"name"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String COLUMN_NAME_STNUMBER = <span class="string">"stnumber"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//	数据库名和版本号也可以放在这里面</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String DATABASE_NAME = <span class="string">"student.db"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h5 id="DBHelper"><a href="#DBHelper" class="headerlink" title="DBHelper"></a>DBHelper</h5><p>主要修改<code>onCreate</code>函数，用于创建自己的表，同时修改一些必备的方法（构造、更新）</p>
<div id="flowchart-1" class="flow-chart"></div>



<div><div class="fold_hider"><div class="close hider_title">StduentInfoDBHelper</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StduentInfoDBHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_STUDENT_TABLESQL = <span class="string">"create table "</span></span><br><span class="line">                    + StudentInfoContract.StudentEntry.TABLE_NAME +<span class="string">" ("</span></span><br><span class="line">                    + StudentInfoContract.StudentEntry._ID +<span class="string">" integer primary key, "</span></span><br><span class="line">                    + StudentInfoContract.StudentEntry.COLUMN_NAME_NAME +<span class="string">" text, "</span></span><br><span class="line">                    + StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER +<span class="string">" integer);"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DROP_STUDENT_TABLESQL = <span class="string">"drop table"</span></span><br><span class="line">            + StudentInfoContract.StudentEntry.TABLE_NAME + <span class="string">";"</span>;</span><br><span class="line">    <span class="comment">//  构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StduentInfoDBHelper</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(  context,</span><br><span class="line">                StudentInfoContract.StudentEntry.DATABASE_NAME,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                StudentInfoContract.StudentEntry.DATABASE_VERSION);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        db.execSQL(CREATE_STUDENT_TABLESQL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">        db.execSQL(DROP_STUDENT_TABLESQL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>



<h5 id="Utils工具类"><a href="#Utils工具类" class="headerlink" title="Utils工具类"></a>Utils工具类</h5><p>工具类可以理解为一个工具箱，所需要的所有的工具（方法）都继承在了这里面</p>
<div id="flowchart-2" class="flow-chart"></div>

<h6 id="函数总览"><a href="#函数总览" class="headerlink" title="函数总览"></a>函数总览</h6><p><img data-src="http://blog-image.pek3b.qingstor.com/201907111702_143.png" alt="Utils类的所有方法"></p>
<h6 id="设置上下文"><a href="#设置上下文" class="headerlink" title="设置上下文"></a>设置上下文</h6><div><div class="fold_hider"><div class="close hider_title">setContext</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> StduentInfoDBHelper m_dbHelper;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context m_ctx;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context ctx)</span></span>&#123;</span><br><span class="line">    m_ctx = ctx;</span><br><span class="line">    <span class="keyword">if</span> (m_dbHelper==<span class="keyword">null</span>)&#123;</span><br><span class="line">        m_dbHelper = <span class="keyword">new</span> StduentInfoDBHelper(m_ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="按照姓名和学号添加至数据库"><a href="#按照姓名和学号添加至数据库" class="headerlink" title="按照姓名和学号添加至数据库"></a>按照姓名和学号添加至数据库</h6><div><div class="fold_hider"><div class="close hider_title">insertStudent</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照学生姓名和学号添加至数据库</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">insertStudent</span><span class="params">(Student stu)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span>(m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    values.put(StudentInfoContract.StudentEntry.COLUMN_NAME_NAME, stu.getName());</span><br><span class="line">    values.put(StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER, stu.getStunumber());</span><br><span class="line">    <span class="keyword">long</span> insertcount = db.insert(StudentInfoContract.StudentEntry.TABLE_NAME,<span class="keyword">null</span>, values);</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="comment">//	此处返回的是数据库中所有条目的数量</span></span><br><span class="line">    <span class="keyword">return</span> insertcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="按照姓名删除学生"><a href="#按照姓名删除学生" class="headerlink" title="按照姓名删除学生"></a>按照姓名删除学生</h6><div><div class="fold_hider"><div class="close hider_title">deleteStudentByName</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照姓名删除学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (m_dbHelper!=<span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    String whereClause = StudentInfoContract.StudentEntry.COLUMN_NAME_NAME+<span class="string">" = ?"</span>;</span><br><span class="line">    String[] whereArgs = <span class="keyword">new</span> String[] &#123;name&#125;;</span><br><span class="line">    <span class="keyword">int</span> deletecount = db.delete(StudentInfoContract.StudentEntry.TABLE_NAME, whereClause, whereArgs);</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="comment">//	返回成功删除条目的数量</span></span><br><span class="line">    <span class="keyword">return</span> deletecount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="按照学号删除学生"><a href="#按照学号删除学生" class="headerlink" title="按照学号删除学生"></a>按照学号删除学生</h6><div><div class="fold_hider"><div class="close hider_title">deleteStudentByNumber</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照学号删除学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> stunum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (m_dbHelper!=<span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    String whereClause = StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER+<span class="string">" = ?"</span>;</span><br><span class="line">    String[] whereArgs = <span class="keyword">new</span> String[] &#123;String.valueOf(stunum)&#125;;</span><br><span class="line">    <span class="keyword">int</span> deletecount = db.delete(StudentInfoContract.StudentEntry.TABLE_NAME, whereClause, whereArgs);</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="comment">//	返回成功删除条目的数量</span></span><br><span class="line">    <span class="keyword">return</span> deletecount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="按照姓名-amp-学号删除学生"><a href="#按照姓名-amp-学号删除学生" class="headerlink" title="按照姓名&amp;学号删除学生"></a>按照姓名&amp;学号删除学生</h6><p>这里涉及到一个双重筛选的条件，只需要对<code>whereClause</code>和<code>whereArgs</code>进行编辑即可</p>
<p>将我们需要匹配的两个字段名在<code>whereClause</code>中用<code>AND</code>方法连接起来，并在<code>whereArgs</code>中添加需要匹配的字符串数组即可</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111546_882.png" alt="查询到的写法"></p>
<div><div class="fold_hider"><div class="close hider_title">deleteStudentByNameAndNumber</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按姓名+学号双匹配方式删除学生</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(String name, <span class="keyword">int</span> stunum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    String whereClause =</span><br><span class="line">            StudentInfoContract.StudentEntry.COLUMN_NAME_NAME + <span class="string">" = ?"</span> + <span class="string">" AND "</span> +</span><br><span class="line">            StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER +<span class="string">" = ?"</span>;</span><br><span class="line">    String[] whereArgs = <span class="keyword">new</span> String[]&#123;name, String.valueOf(stunum)&#125;;</span><br><span class="line">    <span class="keyword">int</span> deletecount = db.delete(StudentInfoContract.StudentEntry.TABLE_NAME, whereClause, whereArgs);</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="keyword">return</span> deletecount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="根据学号更新姓名"><a href="#根据学号更新姓名" class="headerlink" title="根据学号更新姓名"></a>根据学号更新姓名</h6><div><div class="fold_hider"><div class="close hider_title">updateStudent</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  根据学号更新姓名</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(<span class="keyword">int</span> stunum, String newname)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span>(m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    values.put(StudentInfoContract.StudentEntry.COLUMN_NAME_NAME, newname);</span><br><span class="line">    String whereClause = StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER+<span class="string">" = ?"</span>;</span><br><span class="line">    String[] whereArgs = <span class="keyword">new</span> String[]&#123;String.valueOf(stunum)&#125;;</span><br><span class="line">    <span class="keyword">int</span> updatecount = db.update(StudentInfoContract.StudentEntry.TABLE_NAME, values, whereClause, whereArgs);</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="comment">//	返回成功更新条目的数量</span></span><br><span class="line">    <span class="keyword">return</span> updatecount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="设置查询需要用的字段名"><a href="#设置查询需要用的字段名" class="headerlink" title="设置查询需要用的字段名"></a>设置查询需要用的字段名</h6><p>因为每次查询都需要使用，所以设置成为全局变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] columns = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        StudentInfoContract.StudentEntry._ID,                   <span class="comment">//  第0列</span></span><br><span class="line">        StudentInfoContract.StudentEntry.COLUMN_NAME_NAME,      <span class="comment">//  第1列</span></span><br><span class="line">        StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER   <span class="comment">//  第2列</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>后面使用的所有查询方法都可以直接使用<code>columns</code>的查询变量</p>
<h6 id="查询所有条目"><a href="#查询所有条目" class="headerlink" title="查询所有条目"></a>查询所有条目</h6><div><div class="fold_hider"><div class="close hider_title">queryStudent</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">queryStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    <span class="comment">//	此处，columns后面紧跟着是要查询的列和判断条件，设置为null为全部查询</span></span><br><span class="line">    Cursor cursor = db.query(StudentInfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">                             columns, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    ArrayList&lt;Student&gt; stulist = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext())&#123;</span><br><span class="line">            String tmpname = cursor.getString(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_NAME));</span><br><span class="line">            <span class="keyword">int</span> tmpstunumber = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER));</span><br><span class="line">            <span class="keyword">int</span> tmp_id = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry._ID));</span><br><span class="line">            Student tmpstu = <span class="keyword">new</span> Student(tmp_id,tmpname,tmpstunumber);</span><br><span class="line">            stulist.add(tmpstu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="keyword">return</span> stulist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="按照学号查找"><a href="#按照学号查找" class="headerlink" title="按照学号查找"></a>按照学号查找</h6><div><div class="fold_hider"><div class="close hider_title">queryStudentByNumber</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">queryStudent</span><span class="params">(<span class="keyword">int</span> stunum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    String selection = StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER + <span class="string">" = ?"</span>;</span><br><span class="line">    String[] selectionArgs = <span class="keyword">new</span> String[]&#123;String.valueOf(stunum)&#125;;</span><br><span class="line">    Cursor cursor = db.query(StudentInfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">            columns, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    ArrayList&lt;Student&gt; stulist = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            String tmpname = cursor.getString(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_NAME));</span><br><span class="line">            <span class="keyword">int</span> tmpstunumber = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER));</span><br><span class="line">            <span class="keyword">int</span> tmp_id = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry._ID));</span><br><span class="line">            Student tmpstu = <span class="keyword">new</span> Student(tmp_id,tmpname,tmpstunumber);</span><br><span class="line">            stulist.add(tmpstu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="keyword">return</span> stulist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="按照姓名查找"><a href="#按照姓名查找" class="headerlink" title="按照姓名查找"></a>按照姓名查找</h6><div><div class="fold_hider"><div class="close hider_title">queryStudentByName</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照姓名查找条目</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">queryStudent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    String selection = StudentInfoContract.StudentEntry.COLUMN_NAME_NAME + <span class="string">" = ?"</span>;</span><br><span class="line">    String[] selectionArgs = <span class="keyword">new</span> String[]&#123;name&#125;;</span><br><span class="line">    Cursor cursor = db.query(StudentInfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">            columns, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    ArrayList&lt;Student&gt; stulist = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            String tmpname = cursor.getString(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_NAME));</span><br><span class="line">            <span class="keyword">int</span> tmpstunumber = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER));</span><br><span class="line">            <span class="keyword">int</span> tmp_id = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry._ID));</span><br><span class="line">            Student tmpstu = <span class="keyword">new</span> Student(tmp_id,tmpname,tmpstunumber);</span><br><span class="line">            stulist.add(tmpstu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="keyword">return</span> stulist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="按照姓名-amp-学号查找"><a href="#按照姓名-amp-学号查找" class="headerlink" title="按照姓名&amp;学号查找"></a>按照姓名&amp;学号查找</h6><p>这里双匹配的方式跟上述删除学生的方法相同</p>
<p>设置<code>selection</code>和<code>selectionArgs</code>即可</p>
<div><div class="fold_hider"><div class="close hider_title">queryStudentByNameAndNumber</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照姓名&amp;学号双匹配方式查找条目</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">queryStudent</span><span class="params">(String name,<span class="keyword">int</span> stunum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> (m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    String selection =</span><br><span class="line">            StudentInfoContract.StudentEntry.COLUMN_NAME_NAME + <span class="string">" = ?"</span> + <span class="string">" AND "</span> +</span><br><span class="line">            StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER +<span class="string">" = ?"</span>;</span><br><span class="line">    String[] selectionArgs = <span class="keyword">new</span> String[]&#123;name, String.valueOf(stunum)&#125;;</span><br><span class="line">    Cursor cursor = db.query(StudentInfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">            columns, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    ArrayList&lt;Student&gt; stulist = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">            String tmpname = cursor.getString(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_NAME));</span><br><span class="line">            <span class="keyword">int</span> tmpstunumber = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry.COLUMN_NAME_STNUMBER));</span><br><span class="line">            <span class="keyword">int</span> tmp_id = cursor.getInt(cursor.getColumnIndex(StudentInfoContract.StudentEntry._ID));</span><br><span class="line">            Student tmpstu = <span class="keyword">new</span> Student(tmp_id,tmpname,tmpstunumber);</span><br><span class="line">            stulist.add(tmpstu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    db.close();</span><br><span class="line">    <span class="keyword">return</span> stulist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><div id="flowchart-3" class="flow-chart"></div>

<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><div><div class="fold_hider"><div class="close hider_title">MainActivity</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText et_name;</span><br><span class="line">    <span class="keyword">private</span> EditText et_stunumber;</span><br><span class="line">    <span class="keyword">private</span> ListView lv_student;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//	设置上下文</span></span><br><span class="line">        StudentInfoUtils.setContext(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//	控件初始化</span></span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        et_name = (EditText) findViewById(R.id.et_name);</span><br><span class="line">        et_stunumber = (EditText) findViewById(R.id.et_stunumber);</span><br><span class="line">        lv_student = (ListView) findViewById(R.id.lv_student);</span><br><span class="line">        MyAdapter adapter = <span class="keyword">new</span> MyAdapter();</span><br><span class="line">        lv_student.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h5 id="按键响应函数"><a href="#按键响应函数" class="headerlink" title="按键响应函数"></a>按键响应函数</h5><div id="flowchart-4" class="flow-chart"></div>

<h6 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h6><div id="flowchart-5" class="flow-chart"></div>

<div><div class="fold_hider"><div class="close hider_title">insertButton</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String name = et_name.getText().toString().trim();</span><br><span class="line">    String stunum = et_stunumber.getText().toString().trim();</span><br><span class="line">    <span class="keyword">if</span> (name.length() &gt; <span class="number">0</span> &amp;&amp; stunum.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="number">0</span>, name, Integer.valueOf(stunum));</span><br><span class="line">        <span class="keyword">long</span> count = StudentInfoUtils.insertStudent(stu);</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"您没有添加学生"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"信息添加成功！目前一共添加了"</span> + count + <span class="string">"条学生信息"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"信息不全！无法添加学生信息"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><div id="flowchart-6" class="flow-chart"></div>

<div><div class="fold_hider"><div class="close hider_title">deleteButton</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String name = et_name.getText().toString().trim();</span><br><span class="line">    String stunum = et_stunumber.getText().toString().trim();</span><br><span class="line">    <span class="keyword">if</span> (name.length() &lt;= <span class="number">0</span> &amp;&amp; stunum.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//	没有输入</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"信息错误！无法删除学生"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.length() &gt; <span class="number">0</span> &amp;&amp; stunum.length() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//  按姓名删除</span></span><br><span class="line">        <span class="keyword">int</span> count = StudentInfoUtils.deleteStudent(name);</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"没有您要删除学生"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"成功删除了"</span> + count + <span class="string">"条学生信息"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.length() &lt;= <span class="number">0</span> &amp;&amp; stunum.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//  按学号删除</span></span><br><span class="line">        <span class="keyword">int</span> count = StudentInfoUtils.deleteStudent(Integer.valueOf(stunum));</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"没有您要删除学生"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"成功删除了"</span> + count + <span class="string">"条学生信息"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//  按姓名+学号删除</span></span><br><span class="line">        <span class="keyword">int</span> count = StudentInfoUtils.deleteStudent(name, Integer.valueOf(stunum));</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"没有您要删除学生"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"成功删除了"</span> + count + <span class="string">"条学生信息"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="修改（按学号改姓名）"><a href="#修改（按学号改姓名）" class="headerlink" title="修改（按学号改姓名）"></a>修改（按学号改姓名）</h6><div id="flowchart-7" class="flow-chart"></div>

<div><div class="fold_hider"><div class="close hider_title">updateButton</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String name = et_name.getText().toString().trim();</span><br><span class="line">    String stunum = et_stunumber.getText().toString().trim();</span><br><span class="line">    <span class="keyword">if</span> (stunum.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"信息错误！无法修改学生"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> count = StudentInfoUtils.updateStudent(Integer.valueOf(stunum), name);</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"没有您要更新学生"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"成功更新了"</span> + count + <span class="string">"条学生信息"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><div id="flowchart-8" class="flow-chart"></div>

<div><div class="fold_hider"><div class="close hider_title">queryButton</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String name = et_name.getText().toString().trim();</span><br><span class="line">    String stunum = et_stunumber.getText().toString().trim();</span><br><span class="line">    <span class="keyword">if</span> (name.length() &lt;= <span class="number">0</span> &amp;&amp; stunum.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//  查询所有的学生信息</span></span><br><span class="line">        list = StudentInfoUtils.queryStudent();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.length() &gt; <span class="number">0</span> &amp;&amp; stunum.length() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//  按姓名查询</span></span><br><span class="line">        list = StudentInfoUtils.queryStudent(name);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.length() &lt;= <span class="number">0</span> &amp;&amp; stunum.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//  按学号查询</span></span><br><span class="line">        list = StudentInfoUtils.queryStudent(Integer.valueOf(stunum));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//  按姓名+学号查询</span></span><br><span class="line">        list = StudentInfoUtils.queryStudent(name,Integer.valueOf(stunum));</span><br><span class="line">    &#125;</span><br><span class="line">    adapter.notifyDataSetChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h5 id="MyAdapter类"><a href="#MyAdapter类" class="headerlink" title="MyAdapter类"></a>MyAdapter类</h5><div id="flowchart-9" class="flow-chart"></div>

<h6 id="getView"><a href="#getView" class="headerlink" title="getView()"></a>getView()</h6><p><code>getView()</code>方法是更新控件的关键</p>
<div id="flowchart-10" class="flow-chart"></div>

<div><div class="fold_hider"><div class="close hider_title">getView()</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        convertView = View.inflate(MainActivity.<span class="keyword">this</span>, R.layout.student_item, <span class="keyword">null</span>);</span><br><span class="line">        viewHolder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">        viewHolder._id = convertView.findViewById(R.id._id);</span><br><span class="line">        viewHolder.name = convertView.findViewById(R.id.name);</span><br><span class="line">        viewHolder.stunumber = convertView.findViewById(R.id.stunumber);</span><br><span class="line">        convertView.setTag(viewHolder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        viewHolder = (ViewHolder) convertView.getTag();</span><br><span class="line">    &#125;</span><br><span class="line">    Student stu = list.get(position);</span><br><span class="line">    viewHolder._id.setText(String.valueOf(stu.get_id()));</span><br><span class="line">    viewHolder.name.setText(stu.getName());</span><br><span class="line">    viewHolder.stunumber.setText(String.valueOf(stu.getStunumber()));</span><br><span class="line">    <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="getCount"><a href="#getCount" class="headerlink" title="getCount()"></a>getCount()</h6><p>由于是使用<code>list</code>来更新数据，所以此处应该返回一个与<code>list</code>列表长度相同数量的<code>Item</code></p>
<div><div class="fold_hider"><div class="close hider_title">getCount()</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="内置ViewHolder类"><a href="#内置ViewHolder类" class="headerlink" title="内置ViewHolder类"></a>内置ViewHolder类</h6><div><div class="fold_hider"><div class="close hider_title">ViewHolder类</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> TextView _id;</span><br><span class="line">    <span class="keyword">public</span> TextView name;</span><br><span class="line">    <span class="keyword">public</span> TextView stunumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h3 id="黑盒测试结果"><a href="#黑盒测试结果" class="headerlink" title="黑盒测试结果"></a>黑盒测试结果</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><div><div class="fold_hider"><div class="close hider_title">插入测试</div></div><div class="fold">
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111751_876.gif" alt="成功插入测试"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111752_124.gif" alt="信息不全，无法插入测试"></p>

</div></div>

<h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><div><div class="fold_hider"><div class="close hider_title">删除测试</div></div><div class="fold">
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111758_125.gif" alt="按姓名删除"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111800_510.gif" alt="按学号删除"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111802_671.gif" alt="姓名&amp;学号删除"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111803_107.gif" alt="删除错误提示"></p>

</div></div>

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><div><div class="fold_hider"><div class="close hider_title">修改测试</div></div><div class="fold">
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111804_814.gif" alt="按照学号修改姓名"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111812_467.gif" alt="错误修改测试"></p>

</div></div>

<h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><div><div class="fold_hider"><div class="close hider_title">查询测试</div></div><div class="fold">
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907111815_433.gif" alt="四种查询测试"></p>

</div></div>















<p>—<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">s=>start: 启动程序
op1=>operation: 初始化控件
op2=>operation: 初始化 DBUtils 工具类
e=>end: 监听按键下达指令
s->op1->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">s=>start: 继承自SQLiteOpenHelper
op1=>operation: 完善构造函数
op2=>operation: 重写自己的 onCreate() 函数
op3=>operation: 重写 onUpgrade() 函数
e=>end: 完毕
s->op1->op2->op3->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">s=>start: 开始
op1=>operation: 初始化 DBHelper（设置好上下文 context）
op2=>operation: 实现自己需要的功能： 增删改查
e=>end: 结束
s->op1->op2->e</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script><textarea id="flowchart-3-code" style="display: none">s=>start: 开始
op1=>operation: 初始化各控件（两个文本框和ListView）
op2=>operation: 设置 Utils 的上下文（设置Utils内的DBHelper的上下文）
op3=>operation: 为 ListView 编写并设置 Adapter 类
op4=>operation: 编写各按键的监听函数
e=>end: 结束
s->op1->op2->op3->op4->e</textarea><textarea id="flowchart-3-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-3-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-3-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-3", options);</script><textarea id="flowchart-4-code" style="display: none">s=>start: 按键按下
op1=>operation: 读取 TextView 的数据
op2=>subroutine: 利用 Utils 执行对应的操作
op3=>operation: 利用 Toast 显示操作结果
e=>end: 结束
s->op1->op2->op3->e</textarea><textarea id="flowchart-4-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-4-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-4-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-4", options);</script><textarea id="flowchart-5-code" style="display: none">s=>start: 按键按下
op1=>operation: 读取 TextView 的数据
con1=>condition: 输入框是否为空?
con2=>condition: 返回结果
（数据库总条目）
是否大于0?
op3=>subroutine: 利用 Utils 执行 insert()
e1=>end: Toast: 添加成功，
返回目前的条目数量
e2=>end: Toast: 添加错误，信息不全
e3=>end: Toast: 数据库操作错误，添加失败
s->op1->con1
con1(yes)->op3->con2
con1(no)->e2
con2(yes)->e1
con2(no)->e3</textarea><textarea id="flowchart-5-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-5-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-5-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-5", options);</script><textarea id="flowchart-6-code" style="display: none">s=>start: 按键按下
op1=>operation: 读取 TextView 的数据
con1=>condition: 两个输入框是否全为空?
con2=>condition: 返回删除的数量
是否大于0？
op2=>operation: 判断执行哪一种删除方法：
按姓名删除 or
按学号删除 or
按照姓名+学号删除
op3=>subroutine: 利用 Utils 执行相应的删除方法
e1=>end: Toast: 删除成功，提示删除的数量
e2=>end: Toast: 信息错误，无法删除
e3=>end: Toast: 错误，没有找到匹配的用户
s->op1->con1
con1(no)->op2->op3->con2
con1(yes,right)->e2
con2(yes)->e1
con2(no)->e3
con2(111)->e2</textarea><textarea id="flowchart-6-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-6-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-6-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-6", options);</script><textarea id="flowchart-7-code" style="display: none">s=>start: 按键按下
op1=>operation: 读取 TextView 的数据
con1=>condition: 学号输入框
是否为空?
con2=>condition: 返回已更新的数量
是否大于0？
op3=>subroutine: 利用 Utils 执行相应的更新方法
e1=>end: Toast: 更新成功，提示修改的数量
e2=>end: Toast: 信息错误，无法更新
e3=>end: Toast: 错误，没有找到匹配的用户
s->op1->con1
con1(no)->op3->con2
con1(yes,right)->e2
con2(yes)->e1
con2(no)->e3
con2(111)->e2</textarea><textarea id="flowchart-7-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-7-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-7-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-7", options);</script><textarea id="flowchart-8-code" style="display: none">s=>start: 按键按下
op1=>operation: 读取 TextView 的数据
con1=>condition: 两个输入框是否全为空?
op4=>operation: 用 Utils 查询全部条目
con2=>condition: 返回查询的数量
是否大于0？
op2=>operation: 判断执行哪一种查询方法
按姓名查询 or
按学号查询 or
按照姓名+学号查询
op3=>subroutine: 利用 Utils 执行相应的查询方法：
e1=>operation: Toast: 查询成功，提示查询到的的数量
e2=>operation: Toast: 查询成功，提示查询到的的数量
e3=>end: Toast: 错误，没有找到匹配的用户
end=>end: 更新 Adapter 中的数据
并刷新 TextView 控件
s->op1->con1
con1(no)->op2->op3->con2
con1(yes,right)->op4->e2
con2(yes)->e1->end
con2(no)->e3
con2(111)->e2->end</textarea><textarea id="flowchart-8-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-8-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-8-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-8", options);</script><textarea id="flowchart-9-code" style="display: none">s=>start: 继承自BaseAdapter
op1=>operation: 改写 getCount() 方法
op2=>operation: 改写 getView() 方法
op3=>operation: 创建 ViewHolder 类
s->op1->op2->op3</textarea><textarea id="flowchart-9-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-9-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-9-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-9", options);</script><textarea id="flowchart-10-code" style="display: none">s=>start: getView()
op2=>condition: (利用View回收机制)
判断是否存在空余的 convertView
y1=>operation: 从已有的 convertView 
中 getTag()
y2=>operation: 更新 viewHolder 的值
e=>end: 返回一个 converView
n1=>operation: 新建一个 viewHolder
n2=>operation: 给新建的 viewHolder分配内容
n3=>operation: 给 convertView setTag(viewHolder)
s->op2
op2(yes)->y1->y2->e
op2(no)->n1->n2->n3->y2</textarea><textarea id="flowchart-10-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-10-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-10-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-10", options);</script></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day8</title>
    <url>/blog/internship-day8/</url>
    <content><![CDATA[<h1 id="Android网络编程、Handler、Android线程定义"><a href="#Android网络编程、Handler、Android线程定义" class="headerlink" title="Android网络编程、Handler、Android线程定义"></a>Android网络编程、<strong>Handler</strong>、Android线程定义</h1><a id="more"></a>

<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p><code>GET</code>——&gt;请求获取资源——&gt;得到网页源码（包含响应代码）——&gt;浏览器解析源码生成网页</p>
<p>常见HTTP响应代码</p>
<table>
<thead>
<tr>
<th>Code</th>
<th></th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td>成功</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>拒绝访问</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>找不到页面</td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway</td>
<td>网关拒绝相应</td>
</tr>
<tr>
<td>504</td>
<td>Gateway Timeout</td>
<td>网关超时</td>
</tr>
</tbody></table>
<h4 id="网页源码"><a href="#网页源码" class="headerlink" title="网页源码"></a>网页源码</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907140038_236.png" alt="浏览器的开发者工具"></p>
<p>要学会使用开发者工具去查看网页的<strong>源码</strong></p>
<h3 id="Android中的网络请求"><a href="#Android中的网络请求" class="headerlink" title="Android中的网络请求"></a>Android中的网络请求</h3><h4 id="权限申请"><a href="#权限申请" class="headerlink" title="权限申请"></a>权限申请</h4><p>访问网络需要申请权限</p>
<p>在<code>Manifest</code>中写入使用权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是低级别的权限申请，只需要在配置清单里说明即可，不需要动态申请</p>
<h4 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907140051_637.png" alt="访问网络源码+WebView显示"></p>
<h4 id="绑定按键监听"><a href="#绑定按键监听" class="headerlink" title="绑定按键监听"></a>绑定按键监听</h4><p>初始化控件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        et_webaddr = findViewById(R.id.et_url);</span><br><span class="line">        tv_webcode = findViewById(R.id.tv_code);</span><br><span class="line">        wv_web = (WebView)findViewById(R.id.wv_web);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>按键监听</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reqWeb</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        webaddr = et_webaddr.getText().toString().trim();</span><br><span class="line">        <span class="keyword">if</span> (webaddr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"请求网址为空！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            requestweb(webaddr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="网络请求标准写法"><a href="#网络请求标准写法" class="headerlink" title="网络请求标准写法"></a>网络请求标准写法</h4><h5 id="使用web-addr字符串生成网络资源定位符-URL对象"><a href="#使用web-addr字符串生成网络资源定位符-URL对象" class="headerlink" title="使用web_addr字符串生成网络资源定位符 URL对象"></a>使用web_addr字符串生成网络资源定位符 URL对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(webaddr);</span><br></pre></td></tr></table></figure>

<h5 id="使用url获取网络连接请求对象"><a href="#使用url获取网络连接请求对象" class="headerlink" title="使用url获取网络连接请求对象"></a>使用url获取网络连接请求对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpsURLConnection conn = (HttpsUrlConnection) url.openConnection();</span><br><span class="line">HttpURLConnection conn = (HttpUrlConnection) url.openConnection();</span><br><span class="line"><span class="comment">//	http与https协议的类是不同的，需要分别使用</span></span><br></pre></td></tr></table></figure>

<div class="note primary">
            <p>在Android 9.0中（API 28），系统默认不支持非HTTPS的协议，想要使用不安全的HTTP协议需要在<code>Manifest</code>中设置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">	android:usesCleartextTraffic=<span class="string">"true"</span></span><br><span class="line">	...</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure>
          </div>

<h5 id="设置请求方法和请求超时时间等参数"><a href="#设置请求方法和请求超时时间等参数" class="headerlink" title="设置请求方法和请求超时时间等参数"></a>设置请求方法和请求超时时间等参数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.seteRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">conn.setReadTimeout(<span class="number">5000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="获得返回状态码"><a href="#获得返回状态码" class="headerlink" title="获得返回状态码"></a>获得返回状态码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> code = conn.getResponseCode();</span><br></pre></td></tr></table></figure>

<h5 id="如果请求成功-code-200-则获取返回的数据"><a href="#如果请求成功-code-200-则获取返回的数据" class="headerlink" title="如果请求成功(code==200)则获取返回的数据"></a>如果请求成功(code==200)则获取返回的数据</h5><h5 id="从返回的流文件中取出字符串"><a href="#从返回的流文件中取出字符串" class="headerlink" title="从返回的流文件中取出字符串"></a>从返回的流文件中取出字符串</h5><h5 id="显示到TextView上"><a href="#显示到TextView上" class="headerlink" title="显示到TextView上"></a>显示到<code>TextView</code>上</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">200</span>==code) &#123;</span><br><span class="line">    InputStream inputStream = conn.getInputStream();</span><br><span class="line">    String webcode = inputStream.toString();</span><br><span class="line">    tv_webcode.setText(webcode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<div class="note danger">
            <h4 id="坑一：网络请求需要放到主线程中进行！"><a href="#坑一：网络请求需要放到主线程中进行！" class="headerlink" title="坑一：网络请求需要放到主线程中进行！"></a>坑一：网络请求需要放到主线程中进行！</h4><p>在Android 4.0 以后，为了不影响主线程运行（前台不会被卡死），所有耗时的动作必须放在主线程中执行。</p>
          </div>

<p><strong>解决：</strong>创建子线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestweb</span><span class="params">(<span class="keyword">final</span> String webaddr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;...&#125;).start();</span><br></pre></td></tr></table></figure>

<p>这里，先新建一个 <code>Thread</code>类，并直接使用<code>.start()</code>方法启动子线程</p>
<p>在<code>Thread</code>中，创建一个<strong>匿名可运行类</strong><code>Runnable(){...}</code>，并重写其<code>run()</code>方法</p>
<p>以上，可以视为Android中<strong>使用线程</strong>的方法。</p>
<div class="note danger">
            <h4 id="坑二：字节流太大且分块，不可直接转换成字符串"><a href="#坑二：字节流太大且分块，不可直接转换成字符串" class="headerlink" title="坑二：字节流太大且分块，不可直接转换成字符串"></a>坑二：字节流太大且分块，不可直接转换成字符串</h4><p>流文件的大小不固定，很有可能大到撑爆内存，流的读写均需要缓存，需要循环读取（或写入）固定长度的字节。</p>
          </div>

<p><strong>解决：</strong>使用标准写法</p>
<div id="flowchart-0" class="flow-chart"></div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(inputS);</span><br></pre></td></tr></table></figure>

<p>使用输出流做缓冲，分批分块地取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] readbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = inputStream.read(readbuf, <span class="number">0</span>, <span class="number">1024</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    baos.write(readbuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<div class="note danger">
            <h4 id="坑三：更新UI的操作，需要放到主线程中操作"><a href="#坑三：更新UI的操作，需要放到主线程中操作" class="headerlink" title="坑三：更新UI的操作，需要放到主线程中操作"></a>坑三：更新UI的操作，需要放到主线程中操作</h4><p>UI界面是用户级的接口，为了防止其他应用后台更改UI，Android规定，只允许在主线程中更新UI界面。</p>
          </div>

<p><strong>解决：</strong>在主线程中更新UI</p>
<p><strong>关键：</strong>线程间的通信使用 <strong>handler</strong>，通知主线程更新UI</p>
<h3 id="重点！利用Handler进行线程通信"><a href="#重点！利用Handler进行线程通信" class="headerlink" title="重点！利用Handler进行线程通信"></a>重点！利用Handler进行线程通信</h3><h4 id="使用继承"><a href="#使用继承" class="headerlink" title="使用继承"></a>使用继承</h4><p>创建自己的<code>MyHandler</code>类，继承自<code>Handler</code></p>
<p>在这里实现了接收到数据后的动作（更新UI）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        String webcode = (String) msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_OK:</span><br><span class="line">                tv_webcode.setText(webcode);</span><br><span class="line">                wv_web.loadData(webcode,<span class="string">"text/html"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_ERR:</span><br><span class="line">                tv_webcode.setText(<span class="string">"解析错误！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>onCreate</code>时创建 <em>myhandler</em> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    initView();</span><br><span class="line">    myHandler = <span class="keyword">new</span> MyHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消息发送方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Message msg = myHandler.obtainMessage();</span><br><span class="line">msg.obj = webcodes;</span><br><span class="line"><span class="comment">//	obj 可以为任意的对象，作为数据存储的容器</span></span><br><span class="line">msg.what = REQ_RESULT_OK;</span><br><span class="line"><span class="comment">//	what 为一整形数，用于标识当前数据</span></span><br><span class="line">myHandler.sendMessage(msg);</span><br></pre></td></tr></table></figure>

<h4 id="关于内存泄漏"><a href="#关于内存泄漏" class="headerlink" title="关于内存泄漏"></a>关于内存泄漏</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>继承<code>onDestroy</code>方法，添加一项，使<code>myHandler</code>清空，防止内存泄漏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//为了防止内存泄露，在界面销毁的时候，需要把myHandler未进行完成的事宜全部停止</span></span><br><span class="line">        myHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在Java 中，非静态的内部类和匿名内部类都会隐式地持有其外部类的引用，静态的内部类不会持有外部类的引用。</p>
<div class="note success">
            <p>将MyHandler声明为静态变量，并在Handler种添加一个Activity的弱引用</p>
          </div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907142048_803.png" alt=""></p>
<h3 id="苦尽甘来-——使用匿名线程来更新UI"><a href="#苦尽甘来-——使用匿名线程来更新UI" class="headerlink" title="苦尽甘来 ——使用匿名线程来更新UI"></a>苦尽甘来 ——使用匿名线程来更新UI</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tv_webcode.setText(webcode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最极致的Coding体验。仅仅更新控件使用这个，而需要做出逻辑判断时，使用Handler。</p>
<blockquote>
<p>🐘大象无形，大哗希声🐕</p>
</blockquote>
<h3 id="网络图片加载器"><a href="#网络图片加载器" class="headerlink" title="网络图片加载器"></a>网络图片加载器</h3><p>网络下载图片与网络源码没有特别多的区别</p>
<p>核心区别在于获取的对象不同</p>
<ul>
<li>使用 ImageView 显示</li>
<li>使用<code>BitmapFactory</code>将文件或流转为图片</li>
<li>可以使用缓存机制</li>
</ul>
<h4 id="BitmapFactory转换为图片"><a href="#BitmapFactory转换为图片" class="headerlink" title="BitmapFactory转换为图片"></a><code>BitmapFactory</code>转换为图片</h4><h4 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h4><p><code>Utils</code>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cacheFile</span><span class="params">(InputStream in, File pathname, String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(pathname, filename);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    <span class="keyword">byte</span>[] readbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(readbuf, <span class="number">0</span>,<span class="number">1024</span>))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        fos.write(readbuf, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    fos.close();</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否存在缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cachefile.exists()&amp;&amp;cachefile.length() &gt;<span class="number">0</span>) &#123;</span><br><span class="line">    Bitmap bitmap = BitmapFactory.decodeFile(cachefile.getAbsolutePath());</span><br><span class="line">    iv_image.setImageBitmap(bitmap);</span><br><span class="line">    Log.d(TAG, <span class="string">"loadWebPic: 使用了缓存文件"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"loadWebPic: 使用了网络下载文件"</span>);</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(urltext);</span><br><span class="line">                <span class="keyword">if</span> (url.getProtocol().toLowerCase() == <span class="string">"https"</span>) &#123;</span><br><span class="line">                    HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();</span><br><span class="line">                    conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">                    conn.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="keyword">int</span> code = conn.getResponseCode();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</span><br><span class="line">                        InputStream in = conn.getInputStream();</span><br><span class="line">                        Log.d(TAG, <span class="string">"loadWebPic: "</span>+filename);</span><br><span class="line">                        WebCacheUtils.cacheFile(in, getCacheDir(), filename);</span><br><span class="line">                        Log.d(TAG, <span class="string">"loadWebPic: "</span>+filename);</span><br><span class="line">                        File cachefile = <span class="keyword">new</span> File(getCacheDir(), filename);</span><br><span class="line">                        bitmap = BitmapFactory.decodeFile(cachefile.getAbsolutePath());</span><br><span class="line">                        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                iv_image.setImageBitmap(bitmap);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">                    conn.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="keyword">int</span> code = conn.getResponseCode();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">200</span> == code) &#123;</span><br><span class="line">                        InputStream in = conn.getInputStream();</span><br><span class="line">                        Log.d(TAG, <span class="string">"loadWebPic: "</span>+filename);</span><br><span class="line">                        WebCacheUtils.cacheFile(in, getCacheDir(), filename);</span><br><span class="line">                        Log.d(TAG, <span class="string">"loadWebPic: "</span>+filename);</span><br><span class="line">                        File cachefile = <span class="keyword">new</span> File(getCacheDir(), filename);</span><br><span class="line">                        bitmap = BitmapFactory.decodeFile(cachefile.getAbsolutePath());</span><br><span class="line">                        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                iv_image.setImageBitmap(bitmap);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="BASE64编码"><a href="#BASE64编码" class="headerlink" title="BASE64编码"></a>BASE64编码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Base64.encodeToString(urltext.substring(urltext.length()-<span class="number">10</span>).getBytes(), Base64.DEFAULT);</span><br></pre></td></tr></table></figure>



<h3 id="AsyncTask-进行同步操作"><a href="#AsyncTask-进行同步操作" class="headerlink" title="AsyncTask 进行同步操作"></a>AsyncTask 进行同步操作</h3><p>—<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">init=>start: 新建一个1KB的缓冲区
op1=>operation: 将输入流的数据取出（最大取1024字节）
并存入buffer，返回取出的真实大小
con1=>condition: 返回值是否大于0？
y1=>operation: 将buffer写入输出流（重新拼接）
n1=>end: 停止循环，将baos作为输出流转为字符串
init->op1->con1
con1(yes)->y1(right)->op1
con1(no,down)->n1</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day7</title>
    <url>/blog/day-7/</url>
    <content><![CDATA[<p><strong>ListView</strong>控件的使用</p>
<a id="more"></a>

<h3 id="ListView的使用"><a href="#ListView的使用" class="headerlink" title="ListView的使用"></a>ListView的使用</h3><h4 id="关于Adapter"><a href="#关于Adapter" class="headerlink" title="关于Adapter"></a>关于Adapter</h4><p>由于列表可以显示各种各样的内容，Android适配使用<strong>Adapter</strong>来设置不同的显示样式</p>
<ul>
<li><img data-src="http://blog-image.pek3b.qingstor.com/201907091451_23.gif" alt="ArrayAdapter"></li>
<li><img data-src="http://blog-image.pek3b.qingstor.com/201907091510_574.png" alt="SimpleAdapter"></li>
<li><img data-src="http://blog-image.pek3b.qingstor.com/201907091603_414.gif" alt="MyAdapter(BaseAdapter)"></li>
<li><img data-src="http://blog-image.pek3b.qingstor.com/201907101319_760.gif" alt="inflate并绑定点击监听"></li>
<li><img data-src="http://blog-image.pek3b.qingstor.com/201907101605_264.gif" alt="GridView"></li>
</ul>
<h4 id="ArrayAdapter的调用"><a href="#ArrayAdapter的调用" class="headerlink" title="ArrayAdapter的调用"></a>ArrayAdapter的调用</h4><p>ArrayAdapter为最简单的单列表</p>
<p>UI界面测试</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907091440_814.png" alt="界面设计"></p>
<p>点击逻辑</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907091440_277.png" alt="MainActivity.java里写逻辑代码"></p>
<div><div class="fold_hider"><div class="close hider_title">MainActivity.java</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ListView lv;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        lv = (ListView)findViewById(R.id.lv_);</span><br><span class="line">        <span class="keyword">final</span> Object[] objects = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">"111"</span>,<span class="string">"222"</span>,<span class="string">"333"</span>,<span class="string">"444"</span>,<span class="string">"555"</span>,<span class="string">"666"</span>,<span class="string">"777"</span>,</span><br><span class="line">                <span class="string">"111"</span>,<span class="string">"222"</span>,<span class="string">"333"</span>,<span class="string">"444"</span>,<span class="string">"555"</span>,<span class="string">"666"</span>,<span class="string">"777"</span></span><br><span class="line">        &#125;;</span><br><span class="line">        ArrayAdapter&lt;Object&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>,</span><br><span class="line">                <span class="comment">//  代表每个item的样式</span></span><br><span class="line">                android.R.layout.simple_list_item_1,</span><br><span class="line">                <span class="comment">//  表示每个item显示的内容</span></span><br><span class="line">                objects);</span><br><span class="line">        lv.setAdapter(adapter);</span><br><span class="line">        lv.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">            <span class="keyword">private</span> String TAG = <span class="string">"ListView"</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onItemClick: "</span>+objects[position]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p>由logcat的调试信息可以看到，返回的值为<strong>索引列表</strong>，利用索引（下标）来访问数据。</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907091443_595.gif" alt="ListView简单测试"></p>
<h4 id="SimpleAdapter的使用"><a href="#SimpleAdapter的使用" class="headerlink" title="SimpleAdapter的使用"></a>SimpleAdapter的使用</h4><h5 id="设置Adapter"><a href="#设置Adapter" class="headerlink" title="设置Adapter"></a>设置Adapter</h5><p>五个参数：</p>
<ul>
<li><p>上下文——this</p>
</li>
<li><p>数据本体——data</p>
</li>
<li><p>布局——R.layout.item1</p>
</li>
<li><p>数据来源的字段——from</p>
</li>
<li><p>对应的控件——to</p>
</li>
<li><div><div class="fold_hider"><div class="close hider_title">MainActivity.java</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lv = (ListView)findViewById(R.id.lv_);</span><br><span class="line"><span class="keyword">final</span> List&lt;Map&lt;String, String&gt;&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"Name"</span>, <span class="string">"zhangsan"</span>+i);</span><br><span class="line">    map.put(<span class="string">"PhoneNumber"</span>, <span class="string">"1001000100"</span>+i);</span><br><span class="line">    data.add(map);</span><br><span class="line">&#125;</span><br><span class="line">String[] from = <span class="keyword">new</span> String[]&#123;<span class="string">"Name"</span>, <span class="string">"PhoneNumber"</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] to = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;R.id.tv_name, R.id.tv_phonenumber&#125;;</span><br><span class="line">SimpleAdapter adapter = <span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>,</span><br><span class="line">        <span class="comment">//  数据本体</span></span><br><span class="line">        data,</span><br><span class="line">        <span class="comment">//  布局</span></span><br><span class="line">        R.layout.item1,</span><br><span class="line">        <span class="comment">//  数据的字段</span></span><br><span class="line">        from,</span><br><span class="line">        <span class="comment">//  数据对应的位置</span></span><br><span class="line">        to);</span><br><span class="line">lv.setAdapter(adapter);</span><br></pre></td></tr></table></figure>

</div></div>

</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907091504_873.png" alt="SimpleAdapter的设置"></p>
<h5 id="设置布局"><a href="#设置布局" class="headerlink" title="设置布局"></a>设置布局</h5><div><div class="fold_hider"><div class="close hider_title">item1.xml</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"right"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"40sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_phonenumber"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"40sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontFamily</span>=<span class="string">"sans-serif-light"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"10010001000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907091507_188.png" alt="item1布局"></p>
<h5 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907091510_574.png" alt="SimpleAdapter"></p>
<h4 id="BaseAdapter"><a href="#BaseAdapter" class="headerlink" title="BaseAdapter"></a>BaseAdapter</h4><h5 id="创建一个自己的Adapter（继承自BaseAdapter）"><a href="#创建一个自己的Adapter（继承自BaseAdapter）" class="headerlink" title="创建一个自己的Adapter（继承自BaseAdapter）"></a>创建一个自己的Adapter（继承自BaseAdapter）</h5><blockquote>
<p>ALT+Insert 生成代码</p>
</blockquote>
<p>自动生成代码</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907091519_498.gif" alt="重写BaseAdapter的方法"></p>
<h5 id="查询是否由可用的View"><a href="#查询是否由可用的View" class="headerlink" title="查询是否由可用的View"></a>查询是否由可用的View</h5><blockquote>
<p>CTRL+ALT+F 将局部变量转为全局变量</p>
</blockquote>
<div class="note info">
            <h5 id="Android-内存回收机制"><a href="#Android-内存回收机制" class="headerlink" title="Android 内存回收机制"></a>Android 内存回收机制</h5><p>将可用的内存空间（View）腾空出来，并回收利用View</p>
          </div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907091555_734.png" alt="回收View再利用"></p>
<div><div class="fold_hider"><div class="close hider_title">MyAdapter子类</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MyAdapter"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传入三个参数，关注前两个</span></span><br><span class="line">        <span class="comment">//  第一个为位置索引</span></span><br><span class="line">        <span class="comment">//  第二个为“回收站”，可以判断是否利用可以回收利用的View，节约内存需要使用</span></span><br><span class="line">        TextView view;</span><br><span class="line">        Log.d(TAG, <span class="string">"getView: "</span>+position);</span><br><span class="line">        <span class="comment">//  第三步：做好内存回收机制</span></span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"getView: 使用船新的View！！"</span>);</span><br><span class="line">            view = <span class="keyword">new</span> TextView(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"getView: 回收利用View！"</span>);</span><br><span class="line">            view = (TextView) convertView;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  第四步：设置Item的属性（加载数据）</span></span><br><span class="line">        view.setText(<span class="string">"MyItem"</span>+position);</span><br><span class="line">        view.setTextSize(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//  第五步：返回View对象</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h5 id="加载item数据，返回View对象"><a href="#加载item数据，返回View对象" class="headerlink" title="加载item数据，返回View对象"></a>加载item数据，返回View对象</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907091557_490.png" alt=""></p>
<h5 id="效果测试-1"><a href="#效果测试-1" class="headerlink" title="效果测试"></a>效果测试</h5><p>背后的logcat显示了是否申请了新的View</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907101413_661.gif" alt="内存回收测试"></p>
<h4 id="Inflater定制ListView的Item"><a href="#Inflater定制ListView的Item" class="headerlink" title="Inflater定制ListView的Item"></a>Inflater定制ListView的Item</h4><h5 id="绘制子布局"><a href="#绘制子布局" class="headerlink" title="绘制子布局"></a>绘制子布局</h5><p><code>View.inflate()</code>方法可以给<strong>对象</strong>注入一个<strong>布局</strong></p>
<p>因此，我们首先需要一个<strong>“子布局”</strong>来用于 inflate 到 ListView 控件中</p>
<div><div class="fold_hider"><div class="close hider_title">my_item.xml子布局</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:srcCompat</span>=<span class="string">"@tools:sample/avatars"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"25sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toEndOf</span>=<span class="string">"@+id/iv_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/iv_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"标题标题标题标题标题标题"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_subtitle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/tv_title"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toEndOf</span>=<span class="string">"@+id/iv_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/iv_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"正文\n正文\n正文\n正文\n"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"25sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907101109_635.png" alt="子布局"></p>

</div></div>

<h5 id="在-Adapter-getView-中进行-inflate"><a href="#在-Adapter-getView-中进行-inflate" class="headerlink" title="在 Adapter.getView() 中进行 inflate()"></a>在 Adapter.getView() 中进行 inflate()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//传入三个参数，关注前两个</span></span><br><span class="line">    <span class="comment">//  第一个为位置索引</span></span><br><span class="line">    <span class="comment">//  第二个为“回收站”，可以判断是否利用可以回收利用的View，节约内存需要使用</span></span><br><span class="line">    convertView = View.inflate(MainActivity.<span class="keyword">this</span>, R.layout.my_item, <span class="keyword">null</span>);</span><br><span class="line">	<span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里只由基本的调用逻辑，没进行数据更新和内存回收等优化。</p>
<h5 id="利用-findViewById-查找控件，并对标签进行更新"><a href="#利用-findViewById-查找控件，并对标签进行更新" class="headerlink" title="利用 findViewById() 查找控件，并对标签进行更新"></a>利用 findViewById() 查找控件，并对标签进行更新</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907101117_422.png" alt="利用标签更新数据"></p>
<p>每次更新都需要重复使用 <code>findViewById()</code> 实属浪费</p>
<p>所以引入了接下来的内容：</p>
<h5 id="使用-ViewHolder-进行数据更新"><a href="#使用-ViewHolder-进行数据更新" class="headerlink" title="使用 ViewHolder 进行数据更新"></a>使用 ViewHolder 进行数据更新</h5><p>在 <code>View</code> 控件进行 <code>inflate()</code> 之后，可以使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	对新的View类指定新的ViewHolder</span></span><br><span class="line">View.setTag(ViewHolder);</span><br><span class="line"><span class="comment">//	取得已指定过的ViewHolder</span></span><br><span class="line">View.getTag(ViewHolder);</span><br></pre></td></tr></table></figure>

<p><code>setTag()</code> <code>getTag()</code> 的对象是<code>ViewHolder</code>，所以我们要新建一个内置类 <code>ViewHolder</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ImageView iv_icon;</span><br><span class="line">    <span class="keyword">public</span> TextView tv_title;</span><br><span class="line">    <span class="keyword">public</span> TextView tv_subtitle;</span><br><span class="line">    <span class="comment">//	以下为构建方法，可以在构建时直接指定对象，也可以设置为空，在生成之后在手动指定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(ImageView iv_icon, TextView tv_title, TextView tv_subtitle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iv_icon = iv_icon;</span><br><span class="line">        <span class="keyword">this</span>.tv_title = tv_title;</span><br><span class="line">        <span class="keyword">this</span>.tv_subtitle = tv_subtitle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，我们进行一个内存优化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	如果没有可以回收的 convertView 则使用 setTag(viewHolder)</span></span><br><span class="line"><span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">    convertView = View.inflate(MainActivity.<span class="keyword">this</span>, R.layout.my_item, <span class="keyword">null</span>);</span><br><span class="line">    viewholder = <span class="keyword">new</span> ViewHolder(</span><br><span class="line">            (ImageView) convertView.findViewById(R.id.iv_icon),</span><br><span class="line">            (TextView) convertView.findViewById(R.id.tv_title),</span><br><span class="line">            (TextView) convertView.findViewById(R.id.tv_subtitle));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*	如果ViewHolder类中没有指定构建方法，则使用以下方式</span></span><br><span class="line"><span class="comment">     viewholder = new ViewHolder();</span></span><br><span class="line"><span class="comment">     viewholder.iv_icon = (ImageView) convertView.findViewById(R.id.iv_icon);</span></span><br><span class="line"><span class="comment">     ...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    convertView.setTag(viewholder);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//	否则使用已经设置过的getTag(viewHolder)</span></span><br><span class="line">    viewholder = (ViewHolder) convertView.getTag();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> convertView;</span><br></pre></td></tr></table></figure>

<p>添加一个更新的方式：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907101247_157.png" alt="更新viewHolder"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">viewholder.iv_icon.setBackgroundResource(R.mipmap.ic_launcher);</span><br><span class="line">viewholder.tv_title.setText(<span class="string">"我是第"</span>+position+<span class="string">"号标题！"</span>);</span><br><span class="line">viewholder.tv_subtitle.setText(<span class="string">"我是第"</span>+position+<span class="string">"号内容"</span>+<span class="string">"我是第"</span>+position+<span class="string">"号内容"</span>+<span class="string">"我是第"</span>+position+<span class="string">"号内容"</span>+<span class="string">"我是第"</span>+position+<span class="string">"号内容"</span>+<span class="string">"我是第"</span>+position+<span class="string">"号内容"</span>+<span class="string">"我是第"</span>+position+<span class="string">"号内容"</span>);</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>使用<code>MyAdapter.notifyDataSetChanged()</code>提示数据有更新</p>
          </div>

<h5 id="显示结果"><a href="#显示结果" class="headerlink" title="显示结果"></a>显示结果</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907101248_685.gif" alt="ListView测试"></p>
<h5 id="为-Item-添加点击动作"><a href="#为-Item-添加点击动作" class="headerlink" title="为 Item 添加点击动作"></a>为 Item 添加点击动作</h5><p>在主程序中为<code>ListView</code>控件添加一个<code>Listener</code>用于监听点击动作</p>
<p>对于<code>ListView</code>来说，一般选中的是某一个<strong>条目(Item)</strong> 所以需要添加的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lv.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener());</span><br></pre></td></tr></table></figure>

<p>这里我使用的是创建一个匿名类的方式来实现监听动作，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lv.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"你点击了第"</span>+position+<span class="string">"条项目！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>此时点击某一个条目会出现一个<code>Toast</code>来提示你点击了某一条：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907101319_760.gif" alt="监听点击动作"></p>
<h4 id="GridView"><a href="#GridView" class="headerlink" title="GridView"></a>GridView</h4><h5 id="设计子布局"><a href="#设计子布局" class="headerlink" title="设计子布局"></a>设计子布局</h5><p>首先设计一个 <code>griditem.xml</code> 布局文件</p>
<div><div class="fold_hider"><div class="close hider_title">griditem.xml文件</div></div><div class="fold">
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_cover"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/ic_launcher_background"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_songname"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"歌曲名"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_singer"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"歌手"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907101346_629.png" alt="griditem布局"></p>
<h5 id="编写Adapter"><a href="#编写Adapter" class="headerlink" title="编写Adapter"></a>编写<code>Adapter</code></h5><div><div class="fold_hider"><div class="close hider_title">MyAdapter类</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">"MyAdapter"</span>;</span><br><span class="line">    <span class="keyword">private</span> ViewHolder viewholder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传入三个参数，关注前两个</span></span><br><span class="line">        <span class="comment">//  第一个为位置索引</span></span><br><span class="line">        <span class="comment">//  第二个为“回收站”，可以判断是否利用可以回收利用的View，节约内存需要使用</span></span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            convertView = View.inflate(MainActivity.<span class="keyword">this</span>, R.layout.griditem, <span class="keyword">null</span>);</span><br><span class="line">            viewholder = <span class="keyword">new</span> ViewHolder(</span><br><span class="line">                    (ImageView) convertView.findViewById(R.id.iv_cover),</span><br><span class="line">                    (TextView) convertView.findViewById(R.id.tv_songname),</span><br><span class="line">                    (TextView) convertView.findViewById(R.id.tv_singer));</span><br><span class="line">            convertView.setTag(viewholder);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            viewholder = (ViewHolder) convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  对ViewHolder进行更新</span></span><br><span class="line">        viewholder.tv_songname.setText(<span class="string">"给我"</span>+position+<span class="string">"首歌的时间"</span>);</span><br><span class="line">        viewholder.tv_singer.setText(<span class="string">"我是第"</span>+position+<span class="string">"号歌手"</span>);</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> ImageView iv_cover;</span><br><span class="line">        <span class="keyword">public</span> TextView tv_songname;</span><br><span class="line">        <span class="keyword">public</span> TextView tv_singer;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(ImageView iv_icon, TextView tv_title, TextView tv_subtitle)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.iv_cover = iv_icon;</span><br><span class="line">            <span class="keyword">this</span>.tv_songname = tv_title;</span><br><span class="line">            <span class="keyword">this</span>.tv_singer = tv_subtitle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907101609_962.png" alt="getView方法"></p>
<h5 id="主程序中设置Adapter"><a href="#主程序中设置Adapter" class="headerlink" title="主程序中设置Adapter"></a>主程序中设置Adapter</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> GridView gv;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        gv = findViewById(R.id.gv);</span><br><span class="line">        MyAdapter myAdapter = <span class="keyword">new</span> MyAdapter();</span><br><span class="line">        gv.setAdapter(myAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="GridView测试"><a href="#GridView测试" class="headerlink" title="GridView测试"></a>GridView测试</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907101606_86.gif" alt="GridView"></p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day6</title>
    <url>/blog/day-6/</url>
    <content><![CDATA[<p>Android开发：</p>
<p><strong>利用SQLite存储数据</strong></p>
<a id="more"></a>

<h3 id="SQLite存储数据"><a href="#SQLite存储数据" class="headerlink" title="SQLite存储数据"></a>SQLite存储数据</h3><h4 id="在设备终端使用SQL语句创建和访问数据库"><a href="#在设备终端使用SQL语句创建和访问数据库" class="headerlink" title="在设备终端使用SQL语句创建和访问数据库"></a>在设备终端使用SQL语句创建和访问数据库</h4><h5 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h5><p><strong>主键</strong>、其余键值、键值类型……</p>
<h5 id="数据库操作——增删改查"><a href="#数据库操作——增删改查" class="headerlink" title="数据库操作——增删改查"></a>数据库操作——增删改查</h5><table>
<thead>
<tr>
<th>操作</th>
<th>指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>insert</td>
<td>增加</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>删除</td>
<td></td>
</tr>
<tr>
<td>update</td>
<td>修改</td>
<td></td>
</tr>
<tr>
<td>query (select)</td>
<td>查找</td>
<td></td>
</tr>
</tbody></table>
<p>​    </p>
<h5 id="使用-adb-shell-进入设备终端，并新建数据库文件"><a href="#使用-adb-shell-进入设备终端，并新建数据库文件" class="headerlink" title="使用 adb shell 进入设备终端，并新建数据库文件"></a>使用 adb shell 进入设备终端，并新建数据库文件</h5><p><code>touch studentinfo.db</code></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081403_608.gif" alt="同时新建了studentinfo.db的数据库"></p>
<h5 id="打开数据库，并执行SQL命令"><a href="#打开数据库，并执行SQL命令" class="headerlink" title="打开数据库，并执行SQL命令"></a>打开数据库，并执行SQL命令</h5><p><code>squlite3 studentinfo.db</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table student(id integer primary key, name text, stnumber integer);</span><br><span class="line">create table student(id integer primary key, name text, stnumber integer);</span><br></pre></td></tr></table></figure>

<p>创建—表单—[学生名]—([name] [数据类型] [主键], [name] [数据类型], ….)</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081422_9.gif" alt="SQLite数据库指令"></p>
<h5 id="退出SQL"><a href="#退出SQL" class="headerlink" title="退出SQL"></a>退出SQL</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907081425_28.gif" alt="退出SQL"></p>
<h5 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into student (name, stnumber) values(&#39;zhangsan&#39;, 10101);</span><br><span class="line">insert into student (name, stnumber) values(&#39;lisi&#39;, 12345);</span><br><span class="line">insert into student (name, stnumber) values(&#39;zhangsan&#39;, 10102);</span><br><span class="line">insert into student (name, stnumber) values(&#39;zhangsan&#39;, 10103);</span><br></pre></td></tr></table></figure>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081437_866.gif" alt="插入"></p>
<h5 id="select-query"><a href="#select-query" class="headerlink" title="select (query)"></a>select (query)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student;</span><br><span class="line">select stnumber, name from student where stnumber&gt;10102;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081437_73.gif" alt="查询"></p>
<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from student where stnumber &gt; 10102;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081439_547.gif" alt="删除"></p>
<h5 id="update"><a href="#update" class="headerlink" title="update"></a>update</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update student set name&#x3D;&#39;lisi&#39; where stnumber&gt;&#x3D;10102;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081446_183.gif" alt="更新"></p>
<hr>
<h3 id="简单数据库的实现"><a href="#简单数据库的实现" class="headerlink" title="简单数据库的实现"></a>简单数据库的实现</h3><h4 id="Android源码中创建和使用数据库"><a href="#Android源码中创建和使用数据库" class="headerlink" title="Android源码中创建和使用数据库"></a>Android源码中创建和使用数据库</h4><h5 id="创建契约类"><a href="#创建契约类" class="headerlink" title="创建契约类"></a>创建契约类</h5><p>用来保存要操作的表字段内容等</p>
<div><div class="fold_hider"><div class="close hider_title">StudentinfoContract.java</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqlitedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.provider.BaseColumns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentinfoContract</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  固定写法，对应好对应数据库的table和table对应的字段名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentEntry</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  继承自BaseColumns，可以自动实现主键，所以不需要再次创建主键(._ID)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String TABLE_NAME = <span class="string">"student"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String COLUMN_NAME_NAME = <span class="string">"name"</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String COLUMN_NAME_STNUMBER = <span class="string">"stnumber"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081511_779.png" alt="创建契约类"></p>
<h5 id="编写SQLDBOpenHelper类"><a href="#编写SQLDBOpenHelper类" class="headerlink" title="编写SQLDBOpenHelper类"></a>编写SQLDBOpenHelper类</h5><p>利用Helper来进行数据库的操作，自定义了新建数据库和更新数据库两种方法。</p>
<div><div class="fold_hider"><div class="close hider_title">StudentinfoDbHelper.java</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.sqlitedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentinfoDbHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一些常量</span></span><br><span class="line">    <span class="comment">//  数据库名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"studentinfo.db"</span>;</span><br><span class="line">    <span class="comment">//  数据库版本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//  创建表的SQL指令代码：create table student(id integer primary key, name text, stnumber integer);</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_STUDENT_TABLESQL = <span class="string">"create table "</span></span><br><span class="line">            + StudentinfoContract.StudentEntry.TABLE_NAME +<span class="string">" ("</span></span><br><span class="line">            + StudentinfoContract.StudentEntry._ID +<span class="string">" integer primary key, "</span></span><br><span class="line">            + StudentinfoContract.StudentEntry.COLUMN_NAME_NAME +<span class="string">" text, "</span></span><br><span class="line">            + StudentinfoContract.StudentEntry.COLUMN_NAME_STNUMBER +<span class="string">" integer);"</span>;</span><br><span class="line">    <span class="comment">//  删除表的SQL指令代码：drop table student;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DROP_STUDENT_TABLESQL = <span class="string">"drop table"</span></span><br><span class="line">            + StudentinfoContract.StudentEntry.TABLE_NAME + <span class="string">";"</span>;</span><br><span class="line">    <span class="comment">//  TAG标签</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DBHelper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建DBHelper</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentinfoDbHelper</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</span><br><span class="line">        Log.d(TAG, <span class="string">"StudentinfoDbHelper: Entry DBHelper"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建数据库的SQL语句！</span></span><br><span class="line">    <span class="comment">//只在找不到数据库时才执行onCreate</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span></span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate: "</span>+CREATE_STUDENT_TABLESQL);</span><br><span class="line">        db.execSQL(CREATE_STUDENT_TABLESQL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span></span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onUpgrade: "</span>+ DROP_STUDENT_TABLESQL);</span><br><span class="line">        db.execSQL(DROP_STUDENT_TABLESQL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081558_826.png" alt="DBHelper类"></p>
<h5 id="在主Activity中调用数据库"><a href="#在主Activity中调用数据库" class="headerlink" title="在主Activity中调用数据库"></a>在主<code>Activity</code>中调用数据库</h5><div><div class="fold_hider"><div class="close hider_title">MainActivity.java</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentinfoDbHelper m_dbHelper;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase db;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//  创建一个DBHelper对象</span></span><br><span class="line">        m_dbHelper = <span class="keyword">new</span> StudentinfoDbHelper(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  使用DBHelper对象打开数据库</span></span><br><span class="line">        db = m_dbHelper.getWritableDatabase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  关闭数据库</span></span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h5 id="测试使用表单"><a href="#测试使用表单" class="headerlink" title="测试使用表单"></a>测试使用表单</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907081614_732.png" alt="databases文件夹"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081548_713.gif" alt="验证创建的表单"></p>
<p>可以看到自动创建了新的表，而且文件目录下也多了<code>databases</code>的文件夹</p>
<h4 id="封装类-Utils"><a href="#封装类-Utils" class="headerlink" title="封装类(Utils)"></a>封装类(Utils)</h4><p>将常用的 <strong>增删查补</strong>方法封装到一个<code>java</code>类中，取名为 <code>*-utils.java</code></p>
<h5 id="将学生信息打包成类"><a href="#将学生信息打包成类" class="headerlink" title="将学生信息打包成类"></a>将学生信息打包成类</h5><p>新建一个<code>class</code>文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stunumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<strong>代码生成</strong>功能，自动生成<strong>构造函数</strong>以及<strong>getter</strong>和<strong>setter</strong></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081919_782.gif" alt="生成对象类"></p>
<h5 id="利用封装类来进行SQL操作"><a href="#利用封装类来进行SQL操作" class="headerlink" title="利用封装类来进行SQL操作"></a>利用封装类来进行SQL操作</h5><h6 id="Utils类初始化"><a href="#Utils类初始化" class="headerlink" title="Utils类初始化"></a>Utils类初始化</h6><div id="flowchart-0" class="flow-chart"></div>

<p>想要调用<strong>工具类</strong>，需要先指定<strong>上下文</strong>，这里在<code>MainActivity</code>程序初始化的时候进行调用函数</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081934_88.png" alt="MainActivity.java中初始化"></p>
<div><div class="fold_hider"><div class="close hider_title">Utils类初始化</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context m_ctx = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> StudentinfoDbHelper m_dbHelper = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//  设置上下文，并创建一个DBHelper对象，已创建过的则不必重新创建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context ctx)</span></span>&#123;</span><br><span class="line">    m_ctx = ctx;</span><br><span class="line">    <span class="keyword">if</span> (m_dbHelper==<span class="keyword">null</span>)&#123;</span><br><span class="line">        m_dbHelper = <span class="keyword">new</span> StudentinfoDbHelper(m_ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907082018_369.png" alt="Utils类的第一个方法——设置上下文、创建DBHelper"></p>
<h6 id="在工具类中写入方法（以插入新数据为例）"><a href="#在工具类中写入方法（以插入新数据为例）" class="headerlink" title="在工具类中写入方法（以插入新数据为例）"></a>在工具类中写入方法（以插入新数据为例）</h6><div id="flowchart-1" class="flow-chart"></div>
<div><div class="fold_hider"><div class="close hider_title">Utils.java类的代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照学生姓名和学号添加至数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(Student stu)</span></span>&#123;</span><br><span class="line">        <span class="comment">//  判断DBHelper是否存在，不存在则报错</span></span><br><span class="line">        <span class="keyword">assert</span>(m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//  使用SQLiteDatabase类型来进行写入操作</span></span><br><span class="line">        <span class="comment">//  在StudentinfoDbHelper中我们重新定义过onCreate和update方法</span></span><br><span class="line">        <span class="comment">//  所以执行.getWritableDatabase()命令时会自动执行我们的onCreate()方法，按照我们的要求去新建数据库</span></span><br><span class="line">        SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数据库</span></span><br><span class="line">        <span class="comment">//  需要指定一个ContentValues类型，用values.put()来写入数据</span></span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(StudentinfoContract.StudentEntry.COLUMN_NAME_NAME, stu.getName());</span><br><span class="line">        values.put(StudentinfoContract.StudentEntry.COLUMN_NAME_STNUMBER, stu.getStunumber());</span><br><span class="line">        <span class="comment">//  写入数据库</span></span><br><span class="line">        db.insert(StudentinfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">                <span class="keyword">null</span>, values);</span><br><span class="line">        db.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081955_573.png" alt="Utils中的实现"></p>
<h6 id="在主程序中调用工具类的方法"><a href="#在主程序中调用工具类的方法" class="headerlink" title="在主程序中调用工具类的方法"></a>在主程序中调用工具类的方法</h6><div><div class="fold_hider"><div class="close hider_title">主程序中调用工具类的代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String name  = et_name.getText().toString().trim();</span><br><span class="line">    String stunum = et_stunumber.getText().toString().trim();</span><br><span class="line">    Student stu = <span class="keyword">new</span> Student(<span class="number">0</span>, name, Integer.valueOf(stunum));</span><br><span class="line">    StudentinfoDbUtils.insertStudent(stu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081956_247.png" alt="MainActivity中调用"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907081738_38.png" alt="游标的动作"></p>
<h6 id="工具类实现删除和更新（修改）"><a href="#工具类实现删除和更新（修改）" class="headerlink" title="工具类实现删除和更新（修改）"></a>工具类实现删除和更新（修改）</h6><div><div class="fold_hider"><div class="close hider_title">Utils.java类的代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照学号删除学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> stunum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> (m_dbHelper!=<span class="keyword">null</span>);</span><br><span class="line">        SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//where 语句的条件</span></span><br><span class="line">        String whereClause = StudentinfoContract.StudentEntry.COLUMN_NAME_STNUMBER+<span class="string">" = ?"</span>;</span><br><span class="line">        <span class="comment">//where 语句的值</span></span><br><span class="line">        String[] whereArgs = <span class="keyword">new</span> String[] &#123;String.valueOf(stunum)&#125;;</span><br><span class="line">        <span class="comment">//  返回值为删除的数量</span></span><br><span class="line">        <span class="keyword">int</span> deletecount = db.delete(StudentinfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">                whereClause, whereArgs);</span><br><span class="line">        db.close();</span><br><span class="line">        <span class="keyword">return</span> deletecount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  根据学号更新姓名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(<span class="keyword">int</span> stunum, String newname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">assert</span>(m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">        SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">        <span class="comment">//  待更新的条目</span></span><br><span class="line">        ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        values.put(StudentinfoContract.StudentEntry.COLUMN_NAME_NAME, newname);</span><br><span class="line">        <span class="comment">//  哪些是需要更新的条目</span></span><br><span class="line">        String whereClause = StudentinfoContract.StudentEntry.COLUMN_NAME_STNUMBER+<span class="string">" = ?"</span>;</span><br><span class="line">        String[] whereArgs = <span class="keyword">new</span> String[]&#123;String.valueOf(stunum)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> updatecount = db.update(StudentinfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">                values, whereClause, whereArgs);</span><br><span class="line">        db.close();</span><br><span class="line">        <span class="keyword">return</span> updatecount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</div></div>



<div><div class="fold_hider"><div class="close hider_title">主程序中调用工具类的代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String name  = et_name.getText().toString().trim();</span><br><span class="line">        <span class="keyword">int</span> count = StudentinfoDbUtils.deleteStudent(name);</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"没有您要删除学生"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"成功删除了"</span>+count+<span class="string">"条学生信息"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        String name  = et_name.getText().toString().trim();</span><br><span class="line">        String stunum = et_stunumber.getText().toString().trim();</span><br><span class="line">        <span class="keyword">int</span> count = StudentinfoDbUtils.updateStudent(Integer.valueOf(stunum), name);</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"没有您要更新学生"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"成功更新了"</span>+count+<span class="string">"条学生信息"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h6 id="查找方法的实现"><a href="#查找方法的实现" class="headerlink" title="查找方法的实现"></a>查找方法的实现</h6><p>面对对象编程的特点，是将一切对象作为编程的重点，这里我们把<strong>学生</strong>作为了对象，那么它应该自己具有自己的属性（值），返回的也是<strong>学生</strong>，即返回的是由<strong>学生</strong>组成的列表。</p>
<div><div class="fold_hider"><div class="close hider_title">Utils.java类的代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  按照学号查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Student&gt; <span class="title">queryStudent</span><span class="params">(<span class="keyword">int</span> stunum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span>(m_dbHelper != <span class="keyword">null</span>);</span><br><span class="line">    SQLiteDatabase db = m_dbHelper.getWritableDatabase();</span><br><span class="line">    String TAG = <span class="string">"query"</span>;</span><br><span class="line">    String[] columns = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">            StudentinfoContract.StudentEntry.COLUMN_NAME_NAME,      <span class="comment">//  第0列</span></span><br><span class="line">            StudentinfoContract.StudentEntry.COLUMN_NAME_STNUMBER,  <span class="comment">//  第1列</span></span><br><span class="line">            StudentinfoContract.StudentEntry._ID</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//  按照学号匹配进行查询的条件阐述</span></span><br><span class="line">    String selection = StudentinfoContract.StudentEntry.COLUMN_NAME_STNUMBER+<span class="string">" = ?"</span>;</span><br><span class="line">    String[] selectionArgs = <span class="keyword">new</span> String[]&#123;String.valueOf(stunum)&#125;;</span><br><span class="line">    Cursor cursor = db.query(StudentinfoContract.StudentEntry.TABLE_NAME,</span><br><span class="line">            columns,        <span class="comment">//  如果给null，则查询所有类</span></span><br><span class="line">            selection,      <span class="comment">//  如果射程null，则查询所有信息</span></span><br><span class="line">            selectionArgs,</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//  创建一个以学生为元素的列表</span></span><br><span class="line">    ArrayList&lt;Student&gt; stulist = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    <span class="comment">//  利用查询到的指针来访问数据</span></span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//  使用cursor遍历</span></span><br><span class="line">        <span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">            <span class="comment">//  使用游标查询字段，并取出使用</span></span><br><span class="line">            <span class="comment">//  创建一个学生列表</span></span><br><span class="line">            <span class="comment">//  与columns查询列的下标一致</span></span><br><span class="line">            String tmpname = cursor.getString(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> tmpstunum = cursor.getInt(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> id = cursor.getInt(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//  官方写法，易读性高</span></span><br><span class="line">            <span class="comment">//cursor.getString(cursor.getColumnIndex(StudentinfoContract.StudentEntry.COLUMN_NAME_NAME));</span></span><br><span class="line">            <span class="comment">//  创建一个学生对象，用来存储获取的数据</span></span><br><span class="line">            Student student = <span class="keyword">new</span> Student(id, tmpname, tmpstunum);</span><br><span class="line">            <span class="comment">//  将获取的学生数据存储到待返回的列表中</span></span><br><span class="line">            stulist.add(student);</span><br><span class="line">            Log.d(TAG, tmpname+<span class="string">"---"</span>+tmpstunum+<span class="string">"---"</span>+id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//	关闭数据库</span></span><br><span class="line">    db.close();</span><br><span class="line">    <span class="keyword">return</span> stulist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>



<div><div class="fold_hider"><div class="close hider_title">主程序中调用工具类的代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryStudent</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String stunum = et_stunumber.getText().toString().trim();</span><br><span class="line">    <span class="comment">//从数据库中查询出来了学生对象的列表</span></span><br><span class="line">    List&lt;Student&gt; list = StudentinfoDbUtils.queryStudent(Integer.valueOf(stunum));</span><br><span class="line">    <span class="comment">//	遍历list,打印学生信息</span></span><br><span class="line">    <span class="comment">//	Java语言的循环写法</span></span><br><span class="line">    <span class="comment">//	for(Student stu: list)&#123;</span></span><br><span class="line">    <span class="comment">//		Log.d(TAG, stu.get_id()+"---"+stu.getName()+"---"+stu.getStunumber());</span></span><br><span class="line">    <span class="comment">//	&#125;</span></span><br><span class="line">    <span class="comment">//	C语言的写法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;list.size(); i++)&#123;</span><br><span class="line">        Student stu = list.get(i);</span><br><span class="line">        Log.d(TAG, stu.get_id()+<span class="string">"---"</span>+stu.getName()+<span class="string">"---"</span>+stu.getStunumber());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h5 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h5><p>四个按钮的功能在Utils类里有说明：</p>
<p>其中删除按钮对应的是第二个——按照姓名删除学生</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907082238_520.png" alt="Utils类中的方法"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907082233_498.gif" alt="增删改查"></p>
<p>左侧显示的为当前表中的所有记录</p>
<p>下方为logcat，用于显示查询query的查询信息。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="事务的概念和实验"><a href="#事务的概念和实验" class="headerlink" title="事务的概念和实验"></a>事务的概念和实验</h3><h4 id="数据库事务的概念"><a href="#数据库事务的概念" class="headerlink" title="数据库事务的概念"></a>数据库事务的概念</h4><blockquote>
<p>1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。<br>2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。</p>
</blockquote>
<h4 id="数据库事务的特性"><a href="#数据库事务的特性" class="headerlink" title="数据库事务的特性"></a>数据库事务的特性</h4><p>具有以下四个属性<strong>ACID</strong></p>
<blockquote>
<p><strong>原子性（Atomicity）</strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。<br><strong>一致性（Consistency）</strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。<br><strong>隔离性（Isolation）</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。<br><strong>持久性（Durability）</strong>：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。</p>
</blockquote>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	开启事务传送</span></span><br><span class="line">db.beginTransaction();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    db.insert();</span><br><span class="line">    db.xxxxx;</span><br><span class="line">    ......;</span><br><span class="line">    <span class="comment">//	设置事务成功标记</span></span><br><span class="line">    db.setTransactionSuccessful();</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//	结束事务</span></span><br><span class="line">db.endTransaction()   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//	只有关闭数据库才会将缓存写入数据库</span></span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure>























































<hr>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">s=>start: 程序初始化
op1=>operation: 选择工具类的上下文（调用DBHelper）
e=>end: 进入程序界面，等到操作指令
s->op1->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">s=>start: 触发函数
e=>end: 程序结束
op1=>operation: 执行相对应的 DBHelper 指令
s->op1->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day5</title>
    <url>/blog/day-5/</url>
    <content><![CDATA[<div class="note default">
            <p>工欲善其事，必先利其器。今日学习的是常用的工具。</p>
          </div>

<p>实用工具、UML、设计模式、系统框架 ……</p>
<a id="more"></a>

<hr>
<h2 id="核心指标"><a href="#核心指标" class="headerlink" title="核心指标"></a>核心指标</h2><ul>
<li>变更通过率（改bug后再次提交的正确率）</li>
<li>模块化</li>
<li>技术积累1</li>
<li>速度</li>
<li>规范性</li>
<li>质量</li>
</ul>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="WorkFlow"><a href="#WorkFlow" class="headerlink" title="WorkFlow"></a>WorkFlow</h3><table>
<thead>
<tr>
<th>工具</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Redmine</td>
<td>需求管理、任务、BUG、Q&amp;A、WIKI</td>
</tr>
<tr>
<td>git</td>
<td>提交代码、规范（提交至gerrit）</td>
</tr>
<tr>
<td>gerrit</td>
<td>由有权限的KOL来提交至公司远程库</td>
</tr>
</tbody></table>
<h3 id="Redmine"><a href="#Redmine" class="headerlink" title="Redmine"></a>Redmine</h3><p>管理工作流的</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907071010_177.png" alt="Redmine"></p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>不多说，直接看大牛教程</p>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的Git教程</a></p>
<p>常用命令：</p>
<table>
<thead>
<tr>
<th>git指令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>clone</td>
<td>从远端克隆一个仓库</td>
</tr>
<tr>
<td>status</td>
<td>查看当前仓库的状态</td>
</tr>
<tr>
<td>add</td>
<td>添加 untracked 文件为 tracked，加入版本控制</td>
</tr>
<tr>
<td>commit</td>
<td>提交本次更改</td>
</tr>
<tr>
<td>push</td>
<td>上传变更</td>
</tr>
<tr>
<td>pull</td>
<td>从远端获取最新的版本</td>
</tr>
<tr>
<td>reset</td>
<td>恢复到某一次版本变更</td>
</tr>
<tr>
<td>log</td>
<td>显示版本变更历史记录</td>
</tr>
<tr>
<td>diff、show</td>
<td>显示当前仓库的改动、显示本次提交的变动</td>
</tr>
<tr>
<td>apply</td>
<td>应用一个patch包，[patch:代码差异包]</td>
</tr>
<tr>
<td>rm</td>
<td>删除一个文件（代码管理，可以利用版本回溯找回）</td>
</tr>
<tr>
<td>checkout</td>
<td>切换分支</td>
</tr>
<tr>
<td>merge</td>
<td>合并分支，一般是把辅分支合并到主分支处</td>
</tr>
<tr>
<td>cherry-pick</td>
<td>选择另一条分支的某一个commit给merge</td>
</tr>
</tbody></table>
<p>​    </p>
<h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p><img data-src="http://blog-image.pek3b.qingstor.com/201907071709_683.png" alt="GitLab说明"></p>
<p>相当于私人Github</p>
<p>常用方式：</p>
<p><code>git pull</code>–&gt;<code>git add</code>/<code>git commit</code> –&gt; <code>git push</code></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907071728_859.gif" alt=""></p>
<p><strong>慎用</strong><code>git reset --hard</code><strong>命令！</strong>，会强制恢复到某一次提交版本。删除多余的文件，常用于<strong>重置存在错误的代码</strong></p>
<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p><img data-src="http://blog-image.pek3b.qingstor.com/201907071129_188.png" alt="Jenkins"></p>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>Linux下的各种常用操作与软件</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>方法有三</p>
<ul>
<li>本地运行</li>
<li>虚拟机（VMware、Docker）</li>
<li>Windows inside linux</li>
</ul>
<p>建议虚拟机直接安装</p>
<h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>修改 /etc/apt/sources.list 为下列代码，提升下载速度（阿里云镜像）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<p>修改文件之后要执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p>然后再下载自己需要的软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install xxxx</span><br></pre></td></tr></table></figure>






<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>Linux系统下的文本编辑器</p>
<p><a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html" target="_blank" rel="noopener">菜鸟教程的快捷键</a></p>
<p>上神图<img data-src="http://blog-image.pek3b.qingstor.com/201907071136_535.png" alt="vim快捷键"></p>
<h3 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h3><p>逆向解包</p>
<p>反编译工具。</p>
<p>但是目前的apk都具有混淆器，使得逆向工程变得很困难。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apktool</span><br></pre></td></tr></table></figure>

<p>直接安装，建议换源后再下载安装，速度快。</p>
<h3 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h3><p>需要下载可执行包，去<a href="https://sourceforge.net/projects/dex2jar/" target="_blank" rel="noopener">https://sourceforge.net/projects/dex2jar/</a></p>
<p>下载后放入Ubuntu中执行</p>
<p>常用的命令为</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh d2j-dex2jar.sh</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>博客再次重建</title>
    <url>/blog/blog-rebuilt-again/</url>
    <content><![CDATA[<p>再一次回到Hexo搭建个人博客……</p>
<a id="more"></a>

<p>从WordPress回来，中途经停了Typecho，最后还是觉得Hexo比较适合我。</p>
<p>纯粹的Markdown编写，渲染使用一步到位，Next主题美观且大方，不需要从那么多不知名的插件和主题中费劲挑选。</p>
<p>Ps：Typecho的Handsome主题确实很好，但是碍于收费问题。。整个博客还没一个收费主题要价高，算了算了……</p>
<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>里程碑</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day4</title>
    <url>/blog/internship-day4/</url>
    <content><![CDATA[<p>Android 开发：<br>测试方法：白盒测试<br>调试方法：Log.d、断点单步调试<br>数据存储方法：</p>
<ol>
<li>SharedPreferences存储小型数据</li>
<li>使用文件（内/外）存储</li>
</ol>
<a id="more"></a>

<h2 id="测试调试方法"><a href="#测试调试方法" class="headerlink" title="测试调试方法"></a>测试调试方法</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>针对某一个功能进行测试</p>
<p>​    C语言——函数</p>
<p>​    Java——类</p>
<p>将单元隔离开进行<strong>独立</strong>测试</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041350_320.png" alt="测试"></p>
<p>有两种测试方式：</p>
<ul>
<li>AndroidTest——启动Android设备进行测试</li>
<li>test——不启动Android设备进行本地测试</li>
</ul>
<h4 id="step1-新建Java类"><a href="#step1-新建Java类" class="headerlink" title="step1.新建Java类"></a>step1.新建Java类</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041357_67.png" alt=""></p>
<h4 id="step2-对新类创建本地测试包"><a href="#step2-对新类创建本地测试包" class="headerlink" title="step2.对新类创建本地测试包"></a>step2.对新类创建本地测试包</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041403_624.png" alt=""></p>
<p><code>@Before</code>和<code>@After</code>为<strong>测试前准备</strong>和<strong>测试后执行</strong></p>
<p><strong>！注意：</strong>只有公有方法才可以进行测试，即<code>public</code>关键字才可以测试，对私有方法<code>private</code>不进行测试。</p>
<p>生成测试用例</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041407_207.png" alt=""></p>
<h4 id="step3-测试用例的编写"><a href="#step3-测试用例的编写" class="headerlink" title="step3.测试用例的编写"></a>step3.测试用例的编写</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041411_493.png" alt=""></p>
<p><code>assertEquals()</code>函数意味判断两值是否相等。</p>
<h4 id="step4-进行测试"><a href="#step4-进行测试" class="headerlink" title="step4.进行测试"></a>step4.进行测试</h4><p>故意写错了<code>mm.multi</code>方法，运行测试，发现测试用例可以自动发现问题。</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041413_965.png" alt=""></p>
<p>测试完成。</p>
<h4 id="step5-安卓真机测试"><a href="#step5-安卓真机测试" class="headerlink" title="step5.安卓真机测试"></a>step5.安卓真机测试</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041423_32.png" alt=""></p>
<p>真机测试使用<strong>模拟机</strong>或<strong>实机</strong>进行测试。</p>
<p>速度会比本地测试要慢很多。单元测试使用相对较少</p>
<h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><h4 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h4><p>级别从高到低，数量越来越少，重要程度越来越高。</p>
<table>
<thead>
<tr>
<th>log级别</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>verbose</td>
<td>所有级别的log</td>
</tr>
<tr>
<td>info</td>
<td>info信息</td>
</tr>
<tr>
<td>debug</td>
<td>debug级别的信息</td>
</tr>
<tr>
<td>warn</td>
<td>警告</td>
</tr>
<tr>
<td>error</td>
<td>报错</td>
</tr>
</tbody></table>
<h4 id="logcat过滤方法"><a href="#logcat过滤方法" class="headerlink" title="logcat过滤方法"></a>logcat过滤方法</h4><ul>
<li>TAG法</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041455_874.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041454_209.gif" alt=""></p>
<ul>
<li>关键字法（略）</li>
</ul>
<h4 id="终端下logcat命令使用方法"><a href="#终端下logcat命令使用方法" class="headerlink" title="终端下logcat命令使用方法"></a>终端下logcat命令使用方法</h4><ol>
<li>进入adb shell</li>
<li>使用logcat抓取日志</li>
</ol>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041508_919.gif" alt=""></p>
<p><code>logcat -s MainActivity:D</code></p>
<p><code>-s</code>按照TAG抓取日志</p>
<p><code>MainActivity</code>为<strong>TAG</strong>名</p>
<p><code>:D</code>为<strong>debug</strong>级别的日志</p>
<ol start="3">
<li>利用grep来过滤关键字</li>
</ol>
<p><code>logcat | grep *</code></p>
<p>*为待过滤的字符串</p>
<h4 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h4><ol>
<li>设置断点</li>
<li>单步执行</li>
</ol>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041519_98.gif" alt="断点调试方法"></p>
<h2 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h2><h3 id="5种数据存储方式："><a href="#5种数据存储方式：" class="headerlink" title="5种数据存储方式："></a>5种数据存储方式：</h3><ul>
<li>使用SharedPreferences存储数据</li>
<li>文件存储数据</li>
<li>SQLite存储数据</li>
</ul>
<h3 id="1-使用-SharedPreferences-存储数据"><a href="#1-使用-SharedPreferences-存储数据" class="headerlink" title="1. 使用 SharedPreferences 存储数据"></a>1. 使用 SharedPreferences 存储数据</h3><h4 id="设计UI界面"><a href="#设计UI界面" class="headerlink" title="设计UI界面"></a>设计UI界面</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041600_177.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041559_508.png" alt=""></p>
<p><strong>UI设计补充</strong>：</p>
<p><code>android:hint</code>输入框提示文本</p>
<p><code>android:inputType</code>该文本框格式，<code>textPersonName</code>自动限制单行，<code>textPassword</code>自动隐藏字符</p>
<h4 id="绑定后台逻辑"><a href="#绑定后台逻辑" class="headerlink" title="绑定后台逻辑"></a>绑定后台逻辑</h4><ol>
<li>获取输入信息</li>
<li>判断是否输入</li>
<li>判断是否正确</li>
<li>判断是否需要保存用户信息</li>
</ol>
<blockquote>
<p><code>CTRL+Q</code>查询注释</p>
</blockquote>
<div><div class="fold_hider"><div class="close hider_title">代码</div></div><div class="fold">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.datademo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.CheckBox;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText et_username;</span><br><span class="line">    <span class="keyword">private</span> EditText et_password;</span><br><span class="line">    <span class="keyword">private</span> CheckBox cb_saveme;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  初始化控件</span></span><br><span class="line">        initView();</span><br><span class="line">        <span class="comment">//  读取信息</span></span><br><span class="line">        reviceInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 初始化控件</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        et_username = findViewById(R.id.et_PersonName);</span><br><span class="line">        et_password = findViewById(R.id.et_Password);</span><br><span class="line">        cb_saveme = findViewById(R.id.cb_saveMe);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reviceInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 读取信息</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        SharedPreferences sp = getSharedPreferences(<span class="string">"saveinfo"</span>, MODE_PRIVATE);</span><br><span class="line">        String getUsername = sp.getString(<span class="string">"us"</span>, <span class="string">""</span>);</span><br><span class="line">        String getPassword = sp.getString(<span class="string">"pw"</span>, <span class="string">""</span>);</span><br><span class="line">        Boolean getSaveStatus = sp.getBoolean(<span class="string">"ss"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getSaveStatus)&#123;</span><br><span class="line">            et_username.setText(getUsername);</span><br><span class="line">            et_password.setText(getPassword);</span><br><span class="line">            cb_saveme.setChecked(getSaveStatus);</span><br><span class="line">            Log.d(<span class="string">"Login"</span>, <span class="string">"reviceInfo: Read"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            et_username.setText(<span class="string">""</span>);</span><br><span class="line">            et_password.setText(<span class="string">""</span>);</span><br><span class="line">            Log.d(<span class="string">"Login"</span>, <span class="string">"reviceInfo: Not Read"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login_onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1.获取输入的用户名和密码</span></span><br><span class="line">        Log.d(<span class="string">"Login"</span>, <span class="string">"login_onClick: "</span>);</span><br><span class="line">        String username = et_username.getText().toString().trim();</span><br><span class="line">        String password = et_password.getText().toString().trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2.如果没有输入则提示用户输入</span></span><br><span class="line">        <span class="keyword">if</span> (username.isEmpty()||password.isEmpty())&#123;</span><br><span class="line">            showToast(<span class="string">"输入信息不完整！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3.判断是否正确，正确则pass，错误则failed</span></span><br><span class="line">        <span class="keyword">if</span> (username.equals(<span class="string">"valpha"</span>)&amp;&amp;password.equals(<span class="string">"123456"</span>))&#123;</span><br><span class="line">            showToast(<span class="string">"登陆信息正确！登陆成功！"</span>);</span><br><span class="line"><span class="comment">//          检查checkBox是否勾选，如果勾选则保存相应的数据和状态</span></span><br><span class="line">            saveUserInfo(username, password, cb_saveme.isChecked());</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">            showToast(<span class="string">"登录信息错误！登陆失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveUserInfo</span><span class="params">(String username, String password, <span class="keyword">boolean</span> savestatus)</span> </span>&#123;</span><br><span class="line">        SharedPreferences sp = getSharedPreferences(<span class="string">"saveinfo"</span>, MODE_PRIVATE);</span><br><span class="line">        SharedPreferences.Editor editor = sp.edit();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 存储路径为/data/data/&lt;包名&gt;/shared_prefs/*.xml</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        editor.putString(<span class="string">"us"</span>, username);</span><br><span class="line">        editor.putString(<span class="string">"pw"</span>, password);</span><br><span class="line">        editor.putBoolean(<span class="string">"ss"</span>, savestatus);</span><br><span class="line">        editor.apply();</span><br><span class="line">        Log.d(<span class="string">"Login"</span>, <span class="string">"saveUserInfo:Info has saved!"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, str, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<h5 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041701_503.png" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041708_864.png" alt=""></p>
<h5 id="判断输入"><a href="#判断输入" class="headerlink" title="判断输入"></a>判断输入</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041709_207.png" alt=""></p>
<h5 id="保存用户信息"><a href="#保存用户信息" class="headerlink" title="保存用户信息"></a>保存用户信息</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041709_871.png" alt=""></p>
<p>使用类似“字典”的方式存储，即<code>key</code>:<code>value</code>键值对的方式保存到xml文件中</p>
<ol>
<li>创建一个<code>SharedPreferences</code>对象</li>
<li>创建一个<code>Editor</code>子对象</li>
<li><code>editor</code>写入键值对</li>
<li>应用（类似写入）</li>
</ol>
<h5 id="显示Toast-封包"><a href="#显示Toast-封包" class="headerlink" title="显示Toast 封包"></a>显示Toast 封包</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041709_570.png" alt=""></p>
<h4 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907041725_618.gif" alt=""></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907041742_643.png" alt=""></p>
<p>文件表单如上</p>
<p><strong>！注意：</strong>由于是表单式存储，不适合保存密码等重要信息！</p>
<h3 id="2-使用文件存储"><a href="#2-使用文件存储" class="headerlink" title="2.使用文件存储"></a>2.使用文件存储</h3><table>
<thead>
<tr>
<th>内部存储</th>
<th>外部存储</th>
</tr>
</thead>
<tbody><tr>
<td>文件可以直接创建，<strong>无权限问题</strong></td>
<td>有可能被用户删除、需要申请<strong>外部读写权限</strong></td>
</tr>
<tr>
<td>只能由<strong>创建它的APP</strong>使用</td>
<td>公共资源，<strong>所有app</strong>均可使用</td>
</tr>
<tr>
<td>卸载app时一同被删除</td>
<td>除了<code>getExternalFilesDir()</code>目录中的文件会被删除外，其余文件不会被删除</td>
</tr>
</tbody></table>
<p>使用外部存储需要<strong>申请外部读写权限</strong>！</p>
<h4 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h4><p>内部存储可以使用的路径有限，在IDE中敲出<code>getdir</code>可以看到如下的自动补全：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907072255_537.png" alt="内部存储可用路径"></p>
<p>利用<code>文件</code>（<code>FILE</code>）类操作文件，并设置log.d进行调试查看路径：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick1</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">	String TAG = <span class="string">"onClick1"</span>;</span><br><span class="line">    File cdir = getCacheDir();</span><br><span class="line">    File fdir = getFilesDir();</span><br><span class="line">    Log.d(TAG, cdir.getAbsolutePath()+<span class="string">"-----"</span>+fdir.getAbsolutePath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://blog-image.pek3b.qingstor.com/201907072305_682.png" alt="log.d信息"></p>
<p>可以看到，<code>getCacheDir</code>的路径为 <em>/data/user/0/com.example.externalfiles/cache</em></p>
<p><code>getFilesDir</code>的路径为 <em>/data/user/0/com.example.externalfiles/files</em></p>
<p>内部存储使用的为包内存储空间 <em>data/user/0/&lt;包名&gt;/files(cache)</em></p>
<p>添加文件读写方式——文件流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick1</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    String TAG = <span class="string">"onClick1"</span>;</span><br><span class="line">    File cdir = getCacheDir();</span><br><span class="line">    File fdir = getFilesDir();</span><br><span class="line">    Log.d(TAG, cdir.getAbsolutePath()+<span class="string">"-----"</span>+fdir.getAbsolutePath());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//  默认输出流保存到包的内部files目录下</span></span><br><span class="line">        FileOutputStream fo = openFileOutput(<span class="string">"aaa.txt"</span>, MODE_PRIVATE);</span><br><span class="line">        fo.write(<span class="string">"HelloWorld! for default."</span>.getBytes());</span><br><span class="line">        fo.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//  保持到cache目录下的方法</span></span><br><span class="line">        File cfile = <span class="keyword">new</span> File(getCacheDir(), <span class="string">"bbb.txt"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(cfile);</span><br><span class="line">        fos.write(<span class="string">"Test for cache."</span>.getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>try/catch</code>语句可以理解为 尝试打开文件流，并写入“Helloworld!”语句，如果出现异常则报错。</p>
<p><code>openFileOutput</code>函数 *&lt;包名&gt;/files* 文件夹下，其他文件夹下如 <em>cache</em> 文件夹则需要通用的方法，</p>
<p>即获取文件指针（文件子类），然后新文件流类，对文件流进行操作。</p>
<p><strong>注意</strong>：如果没有使用 <code>try/catch</code> 语句进行异常捕获会报错，以预防空文件的情况发生。IDE可以自动查错。</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907072340_14.png" alt="写入时会有更多的报错"></p>
<p>此处可以选择第二项，即修改异常捕获，<code>IOException</code> 可以捕捉所有的文件读写类异常。</p>
<p><strong>测试</strong></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907072332_630.png" alt="文件路径下已生成了文件"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907072332_595.png" alt="bbb.txt"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907072333_350.png" alt="aaa.txt"></p>
<p>路径设置正确，文件写入正常。将包卸载后，包全部清空，不存在内部存储空间，所有内部存储文件全部删除。</p>
<h4 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h4><p>外部存储使用 <code>Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);</code> 来获取外部存储路径</p>
<p>参数有很多：</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907072337_732.png" alt="Directory可选参数"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick2</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  external</span></span><br><span class="line">    File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);</span><br><span class="line">    File moviesfile = <span class="keyword">new</span> File(path, <span class="string">"aaa.mp4"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(moviesfile);</span><br><span class="line">        fos.write(<span class="string">"empty..."</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>发现文件夹下无文件！</p>
<p>问题是<strong>未获得文件读取权限</strong>！</p>
<p>添加动态获取权限的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterPermissionGranted</span>(RC_EXTERNAL_READ_WRITE)</span><br><span class="line"><span class="comment">//	在获取权限时写入文件流</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">methodRequireExternalPermission</span><span class="params">(File moviesfile)</span> </span>&#123;</span><br><span class="line">        String[] perms = &#123;Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;;</span><br><span class="line">        <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="keyword">this</span>, perms))&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(moviesfile);</span><br><span class="line">                fos.write(<span class="string">"empty..."</span>.getBytes());</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            EasyPermissions.requestPermissions(<span class="keyword">this</span>, <span class="string">"请求获取外部存储权限"</span>,RC_EXTERNAL_READ_WRITE, perms );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick2</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  external</span></span><br><span class="line">        File path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);</span><br><span class="line">        File moviesfile = <span class="keyword">new</span> File(path, <span class="string">"aaa.mp4"</span>);</span><br><span class="line">        <span class="comment">//	传入文件指针</span></span><br><span class="line">        methodRequireExternalPermission(moviesfile);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第一次执行时，会尝试获取权限，之后即可写入文件</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907080005_731.png" alt="生成外部文件"></p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907080005_535.png" alt="外部文件写入内容"></p>
<p>和代码预期内容一致！</p>
<p><strong>Continue…</strong></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>超Nice软件推荐——PC端</title>
    <url>/blog/super-nice-software-recommendationpc/</url>
    <content><![CDATA[<p><strong>随时更新……</strong></p>
<a id="more"></a>



<h2 id="Typora——markdown编辑器"><a href="#Typora——markdown编辑器" class="headerlink" title="Typora——markdown编辑器"></a>Typora——markdown编辑器</h2><p>个人感觉是最好用的windows端markdown编辑器了。</p>
<ul>
<li>干净、简洁，专注于写作。</li>
<li>粘贴图片自动复制到指定文件夹（我用AutoHotKey实现的自动上传图床，Mac端可以使用IPic自动上传图床）。</li>
<li>即时预览，这个功能非常好用！</li>
</ul>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201901241442_75.png" alt=""> 官网：<a href="https://typora.io/" target="_blank" rel="noopener">Typora官网</a> 下载地址：<a href="https://typora.io/windows/typora-setup-x64.exe?" target="_blank" rel="noopener">Windows X64 下载</a></p>
<hr>
<h2 id="Cmder——Terminal-for-Windows"><a href="#Cmder——Terminal-for-Windows" class="headerlink" title="Cmder——Terminal for Windows"></a>Cmder——Terminal for Windows</h2><p>Windows下的终端实在是难用，cmd难用，powershell强大但界面不忍直视。Putty也太复古了，Xshell感觉还不错，配合Xftp实现服务器管理还是不错的，但是感觉使用Xshell感觉很怪，不够灵活。。 于是乎，我找到了这个，Cmder彻底解决了我的选择困难症。</p>
<ul>
<li>配色多样，界面赏心悦目（颜控党的胜利）</li>
<li>界面简洁明了，把终端内容作为主体。</li>
<li>可以启动多种终端（cmd、powershell、bash、wslbash，特别是wslbash！使用内置linux开发显得是那么的得心应手！）</li>
<li>针对不同终端配置环境变量等。</li>
<li>多页面拆分，多标签页。</li>
</ul>
<p>版本说明：<strong>推荐下载</strong><code>cmder.zip</code> ，集成git的完整版，配置方便。或者下载<code>cmder.7z</code>，无git版，需要简单配置一下。 <img data-src="http://blog-image.pek3b.qingstor.com/201901241446_362.png" alt=""> 官网：<a href="http://cmder.net/" target="_blank" rel="noopener">Cmder官网</a> 下载地址：<a href="https://github.com/cmderdev/cmder/releases" target="_blank" rel="noopener">github release</a></p>
<hr>
<h2 id="ScreenToGIF——录屏软件"><a href="#ScreenToGIF——录屏软件" class="headerlink" title="ScreenToGIF——录屏软件"></a>ScreenToGIF——录屏软件</h2><p>这个软件非常强大，基本只要是在屏幕上出现过的画面，就都可以录制下来。 主要有以下功能：</p>
<ul>
<li>屏幕录制</li>
<li>摄像头录制</li>
<li>录制白板</li>
<li>功能强大的GIF编辑器</li>
</ul>
<p>满足一切对GIF的需求。（其实也能生成视频，安装附加的解码器即可） 这是一个测试： <img data-src="http://blog-image.pek3b.qingstor.com/201901241448_375.png" alt=""> 编辑器：<img data-src="http://blog-image.pek3b.qingstor.com/201901241451_106.png" alt=""> 生成的gif：<img data-src="http://blog-image.pek3b.qingstor.com/201901241454_368.gif" alt=""> 官网：<a href="https://www.screentogif.com/?l=zh_cn" target="_blank" rel="noopener">ScreenToGIF官网</a> 下载地址：<a href="https://github.com/NickeManarin/ScreenToGif/releases" target="_blank" rel="noopener">github release</a></p>
<hr>
<p>更新中……</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>软件分享</tag>
        <tag>更新中</tag>
        <tag>PC端</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day3</title>
    <url>/blog/internship-day3/</url>
    <content><![CDATA[<div class="note default">
            
          </div>

<a id="more"></a>

<hr>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day2</title>
    <url>/blog/day-2/</url>
    <content><![CDATA[<p>需求分析 &amp; Android Studio IDE 的配置与安装</p>
<p>常用控件的使用</p>
<p>实现一个电话拨号器</p>
<a id="more"></a>

<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><blockquote>
<p>分析需求要分维度</p>
</blockquote>
<ol>
<li>从状态去分析<ol>
<li>识别输入</li>
<li>识别输出</li>
<li>识别状态</li>
</ol>
</li>
<li>功能性级别<ol>
<li>用户可操作的</li>
<li>后台（系统）操作的</li>
</ol>
</li>
<li>用户级别的功能分析 eg：<ol>
<li>Play/Pause</li>
<li>Replay</li>
<li>Stop</li>
</ol>
</li>
</ol>
<hr>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907030038_267.png" alt="cockpit分析"></p>
<hr>
<h3 id="需求分析的成果物"><a href="#需求分析的成果物" class="headerlink" title="需求分析的成果物"></a>需求分析的成果物</h3><ul>
<li><p>软件需求</p>
</li>
<li><p>featurelist（功能清单）</p>
<ul>
<li>功能需求定义书</li>
<li>UI（界面）、UE（体验）定义书</li>
</ul>
</li>
<li><p>硬件需求</p>
</li>
<li><p>硬件控制式样书</p>
<ul>
<li>电路图</li>
</ul>
</li>
</ul>
<p><strong>核心是要学会做产品设计</strong></p>
<h2 id="配置Android-Studio环境"><a href="#配置Android-Studio环境" class="headerlink" title="配置Android Studio环境"></a>配置Android Studio环境</h2><h3 id="Step1：安装IDE"><a href="#Step1：安装IDE" class="headerlink" title="Step1：安装IDE"></a>Step1：安装IDE</h3><p>下载、安装。</p>
<h3 id="Step2：配置SDK"><a href="#Step2：配置SDK" class="headerlink" title="Step2：配置SDK"></a>Step2：配置SDK</h3><p>在<strong>SDK Manager</strong>中进行设置，注意要统一版本。此处选择Android Pie（API 28）</p>
<h3 id="Step3：设置gradle"><a href="#Step3：设置gradle" class="headerlink" title="Step3：设置gradle"></a>Step3：设置gradle</h3><p>由于敏感问题，国内无法自动下载<code>gradle</code>，解决方法有以下三种：</p>
<ul>
<li><p>设置代理 <img data-src="http://blog-image.pek3b.qingstor.com/201907022123_665.png" alt="设置代理"></p>
</li>
<li><p>使用国内镜像站下载 修改项目中的<code>build.gradle</code>文件，如下</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.2.3'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可自动下载。</p>
</li>
<li><p>利用本地<code>gradle</code> <img data-src="http://blog-image.pek3b.qingstor.com/201907022129_369.png" alt="本地gradle配置"></p>
</li>
</ul>
<p>最佳解决方法为先设置为<strong>使用镜像站下载</strong>，下载完毕且可以进行同步后更改为<strong>使用本地gradle</strong>的方式来进行同步。</p>
<h3 id="Step4：新建AVD虚拟设备"><a href="#Step4：新建AVD虚拟设备" class="headerlink" title="Step4：新建AVD虚拟设备"></a>Step4：新建AVD虚拟设备</h3><p>打开<strong>AVD Manager</strong>，新建虚拟设备，自定义设备。然后运行，就能看到虚拟设备。 <em>分辨率越小越省内存。</em> 存在<strong>HAXM</strong>或<strong>VT-x</strong>报错，出现这个问题的原因是需要主板开启虚拟设备加速（VT-x），在BIOS设置中开启</p>
<h3 id="Step5：利用adb进行调试"><a href="#Step5：利用adb进行调试" class="headerlink" title="Step5：利用adb进行调试"></a>Step5：利用adb进行调试</h3><p>ADB：Android Debug Bridge <img data-src="http://blog-image.pek3b.qingstor.com/201907022137_941.png" alt="adb原理"> </p>
<p>常用命令：</p>
<table>
<thead>
<tr>
<th>adb命令</th>
<th>含义</th>
<th>*参数1</th>
<th>*参数2</th>
</tr>
</thead>
<tbody><tr>
<td>start-server</td>
<td>启动连接</td>
<td></td>
<td></td>
</tr>
<tr>
<td>kill-server</td>
<td>断开连接</td>
<td></td>
<td></td>
</tr>
<tr>
<td>install</td>
<td>安装apk包</td>
<td>*.apk</td>
<td></td>
</tr>
<tr>
<td>uninstall</td>
<td>卸载某程序</td>
<td>程序包名(com.xxx[公司名].xxx[项目名])</td>
<td></td>
</tr>
<tr>
<td>push</td>
<td>上传文件</td>
<td>待推送(push)文件</td>
<td>目标（设备）路径</td>
</tr>
<tr>
<td>pull</td>
<td>下载文件</td>
<td>待取回(pull)文件</td>
<td>目标（本地）路径</td>
</tr>
<tr>
<td>shell</td>
<td>进入设备终端</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>进入设备终端后的命令（Linux命令）：</p>
<table>
<thead>
<tr>
<th>Linux命令</th>
<th>含义</th>
<th>参数1</th>
<th>*参数2</th>
</tr>
</thead>
<tbody><tr>
<td>rm</td>
<td>remove|删除</td>
<td>某文件路径</td>
<td></td>
</tr>
<tr>
<td>ls</td>
<td>list|列表</td>
<td></td>
<td></td>
</tr>
<tr>
<td>mv</td>
<td>move|移动（重命名）</td>
<td>原文件</td>
<td>新文件</td>
</tr>
<tr>
<td>cd</td>
<td>change directory|切换目录</td>
<td>路径</td>
<td></td>
</tr>
<tr>
<td>cp</td>
<td>copy|复制</td>
<td>源文件</td>
<td>目标路径</td>
</tr>
<tr>
<td>pm</td>
<td>包管理</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>pm指令</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>install</td>
<td>安装apk包</td>
<td>*.apk</td>
<td>P版本(9.0)只允许安装/data/local/tmp/下的apk包</td>
</tr>
<tr>
<td></td>
<td>-r</td>
<td></td>
<td>强制替换原包（升级更新）</td>
</tr>
<tr>
<td>uninstall</td>
<td>卸载包</td>
<td>包名</td>
<td></td>
</tr>
<tr>
<td>list packages</td>
<td>列出所有安装包</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>-3</td>
<td></td>
<td>列出所有第三方安装包</td>
</tr>
</tbody></table>
<h3 id="关于Android-Studio-IDE"><a href="#关于Android-Studio-IDE" class="headerlink" title="关于Android Studio IDE"></a>关于Android Studio IDE</h3><blockquote>
<p>工欲善其事必先利其器</p>
</blockquote>
<p><strong>Android Studio IDE</strong>是_JetBrain_g公司开发的IDE，该公司所有的IDE操作界面、使用逻辑都很相似，学会一款了后以后其他的IDE也都能快速上手。（比如<strong>PyCharm</strong>，学生邮箱可享一年正版！） 特点：</p>
<ul>
<li>可以汉化，有开源作者在更新汉化包，切换很方便</li>
<li>集成很多小工具，如Terminal、GIT等</li>
<li>插件众多，如时间统计wakatime、主题设置One Dark、更换操作方式为vim、Emacs等等</li>
<li>文件管理非常方便，无论是本地文件还是设备文件，如图：</li>
<li><img data-src="http://blog-image.pek3b.qingstor.com/201907030015_244.png" alt=""></li>
</ul>
<p>常用功能：</p>
<ul>
<li><p>APK打包、签名（下方的一个选项） <img data-src="http://blog-image.pek3b.qingstor.com/201907021601_74.png" alt="APK打包"></p>
</li>
<li><p>关于包名，在<code>MainActivity.java</code>和<code>AndroidManifest.xml</code>中 <img data-src="http://blog-image.pek3b.qingstor.com/201907030033_706.png" alt="Manifest中的包名"> <img data-src="http://blog-image.pek3b.qingstor.com/201907030034_545.png" alt="mainActivity中的包名"></p>
</li>
<li><p>adb命令，在命令行下按↑键可以很方便地调用历史命令，常用于卸载已有软件，做新机测试 示例为安装包和卸载包 <img data-src="http://blog-image.pek3b.qingstor.com/201907021641_646.gif" alt="adb命令"></p>
</li>
</ul>
<h2 id="开发电话拨号器"><a href="#开发电话拨号器" class="headerlink" title="开发电话拨号器"></a>开发电话拨号器</h2><h3 id="Step1：设计UI界面"><a href="#Step1：设计UI界面" class="headerlink" title="Step1：设计UI界面"></a>Step1：设计UI界面</h3><h4 id="文件结构："><a href="#文件结构：" class="headerlink" title="文件结构："></a>文件结构：</h4><p><img data-src="http://blog-image.pek3b.qingstor.com/201907022048_874.png" alt="文件结构树"></p>
<h4 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h4><p>其中<code>manifest</code>文件夹下的<code>AndroidManifest.xml</code>是安卓工程的核心配置文件，每个工程<strong>必备且唯一</strong>。 <img data-src="http://blog-image.pek3b.qingstor.com/201907022052_167.png" alt="AndroidManifest.xml"> 在图中所示的地方，标出了主要Java代码的位置。</p>
<h4 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h4><p>核心逻辑代码 <code>onCreate</code>中创建了唯一的<strong>主界面</strong><code>activity_main</code> <img data-src="http://blog-image.pek3b.qingstor.com/201907022056_852.png" alt="MainActivity.java"></p>
<h4 id="res-resource"><a href="#res-resource" class="headerlink" title="res(resource)"></a>res(resource)</h4><p>存放各种资源（图像、音频等）</p>
<p>├─drawable 图标<br>├─layout 界面<br>├─mipmap 图标<br>└─values 各种参数</p>
<p> 修改<code>layout</code> 下的<code>activity_main.xml</code>文件，可以设计出下图的界面（编写xml文件，或使用design图形化设计方式） <img data-src="http://blog-image.pek3b.qingstor.com/201907022030_439.png" alt="activity_main.xml"> 常用控件：</p>
<ul>
<li>布局layout（水平、垂直）</li>
<li>按钮button</li>
<li>文本text（标签、文本框）</li>
<li>多功能部件（WebView、ImageView、VideoView等等）</li>
<li>……</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/linearLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>垂直布局：</p>
<ul>
<li>id</li>
<li>宽度：匹配页面宽度（max）</li>
<li>高度：包裹内容（min）</li>
<li>顶部留白：8像素</li>
<li>方向：垂直</li>
</ul>
<p>实际效果：</p>
<p> <img data-src="http://blog-image.pek3b.qingstor.com/201907022204_526.png" alt="app效果"></p>
<h3 id="Step2：根据UI实现逻辑（逐功能测试）"><a href="#Step2：根据UI实现逻辑（逐功能测试）" class="headerlink" title="Step2：根据UI实现逻辑（逐功能测试）"></a>Step2：根据UI实现逻辑（逐功能测试）</h3><p>界面设计好了，按下按钮时应<strong>callback</strong> 在<code>MainActivity</code>类中添加以下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startcall</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"Clicked"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>并在界面的<strong>按钮</strong>控件上绑定该函数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"startcall"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"拨号"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者 <img data-src="http://blog-image.pek3b.qingstor.com/201907022226_403.png" alt="Design方式设计"> </p>
<p>意思是当按键<strong>点击</strong>时，调用<code>startcall</code>方法</p>
<h3 id="Step3：测试UI效果"><a href="#Step3：测试UI效果" class="headerlink" title="Step3：测试UI效果"></a>Step3：测试UI效果</h3><p>设置好了测试一下</p>
<p> <img data-src="http://blog-image.pek3b.qingstor.com/201907022229_363.gif" alt="onClick"></p>
<p> Toast弹出了</p>
<h3 id="step4：实现拨打电话"><a href="#step4：实现拨打电话" class="headerlink" title="step4：实现拨打电话"></a>step4：实现拨打电话</h3><h4 id="继续设计逻辑"><a href="#继续设计逻辑" class="headerlink" title="继续设计逻辑"></a>继续设计逻辑</h4><p>从文本框中提取数字==&gt;数字用于拨号</p>
<h4 id="1、从文本框中提取出数字"><a href="#1、从文本框中提取出数字" class="headerlink" title="1、从文本框中提取出数字"></a>1、从文本框中提取出数字</h4><p>设置文本框的id</p>
<p> <img data-src="http://blog-image.pek3b.qingstor.com/201907022316_573.png" alt="editText的id"> </p>
<p>寻找我们设置的文本框（类似于设置一个可以访问的socket？ <img data-src="http://blog-image.pek3b.qingstor.com/201907022318_926.png" alt=""> </p>
<p>利用<code>et_number</code>可以获取文本等字符串操作 取出拨号数字 <img data-src="http://blog-image.pek3b.qingstor.com/201907022319_416.png" alt="取出拨号数字"> </p>
<p>现在字符串<code>phonenum</code>中保存的就是我们需要拨号的号码</p>
<h4 id="2、用系统自带的电话应用去拨号"><a href="#2、用系统自带的电话应用去拨号" class="headerlink" title="2、用系统自带的电话应用去拨号"></a>2、用系统自带的电话应用去拨号</h4><p>拨号实现方式：<strong>意图Intent</strong> <img data-src="http://blog-image.pek3b.qingstor.com/201907022327_453.png" alt="实现拨号"> 测试一下：发现会闪退 <img data-src="http://blog-image.pek3b.qingstor.com/201907022331_74.gif" alt=""> 查询logcat，发现问题出在权限上 原来是没有<strong>拨号权限</strong> <img data-src="http://blog-image.pek3b.qingstor.com/201907022357_548.png" alt="旧版解决方法"> Android 5.0之前的版本可以使用这种方式来申请权限，之后的不可以，故采用动态授权的方式。</p>
<h5 id="法一：利用Android提供的动态获取权限API"><a href="#法一：利用Android提供的动态获取权限API" class="headerlink" title="法一：利用Android提供的动态获取权限API"></a>法一：利用Android提供的动态获取权限API</h5><p><img data-src="http://blog-image.pek3b.qingstor.com/201907022357_240.png" alt="通用鲁棒的代码"> <strong>*注意</strong>：此处包含了版本适配，单就算是旧版也是需要在<code>AndroidManifest.xml</code>中添加权限才能使用的 测试一下：</p>
<p> <img data-src="http://blog-image.pek3b.qingstor.com/201907030004_636.gif" alt="申请权限通过"> </p>
<p><strong>*注意</strong>：这里，第一次点击<strong>deny</strong>，是拒绝权限；第二次点<strong>allow</strong>，是同意了权限，但是并不会拨出电话。第三次点击拨号，此时有了拨号权限，所以才可以拨出电话。这就很蠢，UE需要优化。 在同级添加一个申请权限结果的反馈，利用toast做输出 <img data-src="http://blog-image.pek3b.qingstor.com/201907030022_304.png" alt="查看结果"> 测试结果：</p>
<p> <img data-src="http://blog-image.pek3b.qingstor.com/201907030027_483.gif" alt="带申请权限结果反馈"> </p>
<p>在反馈结果中，如果获得了权限，是可以直接执行意图的，即直接拨号，达到了最佳体验。</p>
<h5 id="法二：利用开源框架获取权限"><a href="#法二：利用开源框架获取权限" class="headerlink" title="法二：利用开源框架获取权限"></a>法二：利用开源框架获取权限</h5><p><strong>补充</strong></p>
<h6 id="如何使用开源框架"><a href="#如何使用开源框架" class="headerlink" title="如何使用开源框架"></a>如何使用开源框架</h6><p>在build.gradle中添加dependencies：</p>
<p>如何使用github</p>
<p><img data-src="http://blog-image.pek3b.qingstor.com/201907031435_161.gif" alt="动态权限申请"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>实习Day1</title>
    <url>/blog/internship-day1/</url>
    <content><![CDATA[<h1 id="实习Day1"><a href="#实习Day1" class="headerlink" title="实习Day1"></a>实习Day1</h1><a id="more"></a>
<ul>
<li>学习部分专属名词</li>
<li>嵌入式车载开发的整体结构</li>
<li>SOC、MCU的区别</li>
<li>程序员的发展规划</li>
</ul>
<p>专属名词：</p>
<ul>
<li><strong>SOC：</strong></li>
<li><strong>MCU：</strong></li>
<li>IVI：</li>
<li><strong>infotainment：</strong></li>
<li>T-Box（Telematics-box）：</li>
<li>OBD：<ul>
<li>doIP：</li>
<li>someIP：</li>
</ul>
</li>
<li>OTA：</li>
<li>VR（voice recognition）：</li>
<li>cluster：</li>
<li>DMS：</li>
<li>ADAS：</li>
<li>AVM：</li>
<li>cockpit：</li>
<li>DMIPS：</li>
</ul>
<p>车载域：</p>
<ul>
<li>动力域</li>
<li>自动驾驶域</li>
<li>信息娱乐域</li>
<li>车身域</li>
</ul>
<p>总线：</p>
<ul>
<li>CAN</li>
<li>LIN</li>
<li>FlexRay</li>
<li>ethernet</li>
<li>USB</li>
</ul>
<p>开发环境：</p>
<ul>
<li>RT-OS</li>
<li>*QNX</li>
<li>Linux</li>
<li>Android</li>
</ul>
<p>车载温度：-40～85度</p>
<p><img data-src="https://valpha.xyz/wp-content/uploads/2019/07/image.png" alt=""></p>
<p>车机娱乐域结构图</p>
<p><img data-src="https://valpha.xyz/wp-content/uploads/2019/07/image-1.png" alt=""></p>
<p>SOC与MCU上电过程</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>实习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用BT面板并配置HTTPS访问</title>
    <url>/blog/use-bt-panel-and-configure-https-access/</url>
    <content><![CDATA[<p>建站记录</p>
<a id="more"></a>

<p>自从改用宝塔面板控制后，发现果然GUI界面更适合我，博客逐渐更像个“博客”了。</p>
<p>利用宝塔面板，一键安装LAMP环境、部署Wordpress、开启SSL，301重定向……一切都显得那么信手拈来233~(●ˇ∀ˇ●)</p>
<p>这篇博文就用来纪念成功的给自己的小网站“上锁”吧</p>
<p>PS：开始考虑域名和备案信息等问题了，感觉没有一个固定的域名，就好像一直在租房子住似的，感觉不久之后就会流离失所，没有安全感……</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>里程碑</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指Offer（二）</title>
    <url>/blog/sword-finger-offer-2/</url>
    <content><![CDATA[<p>第二章——基础知识</p>
<a id="more"></a>

<h2 id="第二章——基础知识"><a href="#第二章——基础知识" class="headerlink" title="第二章——基础知识"></a>第二章——基础知识</h2><h3 id="2-2-编程语言"><a href="#2-2-编程语言" class="headerlink" title="2.2 编程语言"></a>2.2 编程语言</h3><p>C++/C#、不是我学习的重点……略过</p>
<h3 id="2-3-数据结构"><a href="#2-3-数据结构" class="headerlink" title="2.3 数据结构"></a>2.3 数据结构</h3><p>数组、字符串、链表、树、栈、队列</p>
<p>数组、字符串是最基础的数据结构，占用连续内存<br>链表、树要注意指针越界问题，防止指针越界导致程序崩溃<br>栈——递归算法<br>队列——广度优先遍历</p>
<h4 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h4><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>剑指Offer</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指Offer（一）</title>
    <url>/blog/sword-finger-offer-1/</url>
    <content><![CDATA[<p>第一章——面试的流程</p>
<a id="more"></a>

<h2 id="第一章——面试的流程"><a href="#第一章——面试的流程" class="headerlink" title="第一章——面试的流程"></a>第一章——面试的流程</h2><h3 id="1-2面试形式："><a href="#1-2面试形式：" class="headerlink" title="1.2面试形式："></a>1.2面试形式：</h3><ul>
<li>电话面试</li>
<li><strong>共享桌面远程面试</strong></li>
<li>现场面试</li>
</ul>
<h4 id="共享桌面远程面试（或提供一个WEB）要点："><a href="#共享桌面远程面试（或提供一个WEB）要点：" class="headerlink" title="共享桌面远程面试（或提供一个WEB）要点："></a>共享桌面远程面试（或提供一个WEB）要点：</h4><ul>
<li>思考清楚再开始coding</li>
<li>良好的命名</li>
<li>正确的缩进</li>
<li>能够进行单元测试用例*<br>优秀的码农应当学会如何测试自己的代码，面试官会对“先写测试后写代码”的程序员<strong>刮目相看</strong>。</li>
<li>熟练的debug能力</li>
</ul>
<h3 id="1-3面试环节："><a href="#1-3面试环节：" class="headerlink" title="1.3面试环节："></a>1.3面试环节：</h3><ul>
<li>行为面试</li>
<li>技术面试</li>
<li>应聘者提问</li>
</ul>
<h4 id="行为面试"><a href="#行为面试" class="headerlink" title="行为面试"></a>行为面试</h4><p>聊天、问项目、谈理想等</p>
<h4 id="技术面试"><a href="#技术面试" class="headerlink" title="技术面试"></a>技术面试</h4><p>应聘者需要具备的素质：<br>1. 扎实的基础知识（语言、数据结构、算法）<br>2. 写出正确、完整、鲁棒的高质量的代码<br>3. 思路清晰地分析、解决问题<br>4. 时间、空间复杂度两方面进行优化算法效率<br>5. 沟通能力、学习能力、发散思维能力</p>
<h4 id="应聘者提问"><a href="#应聘者提问" class="headerlink" title="应聘者提问"></a>应聘者提问</h4><p><strong>切记</strong>：不要问技术人员薪水，对正确的人提合适的问题</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>剑指Offer</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>博客建成里程碑</title>
    <url>/blog/milestone-of-blog-completion/</url>
    <content><![CDATA[<p>正式上线</p>
<a id="more"></a>

<p>2019年6月16日，正式建成自己的博客~<br>成功地完成了域名、服务器、备案等所有的过程，正式开启了自己的博客生涯~</p>
<p>记录以下博客的所有材料：</p>
<ul>
<li>轻量应用服务器（ 10元/月，学生特价）</li>
<li>顶层域名（6元/年，.xyz域名）</li>
</ul>
<p>然后是漫长的备案过程：</p>
<ul>
<li>填申请表单</li>
<li>电话确认信息以及相关信息修改</li>
<li>邮寄幕布以及幕布拍照</li>
<li>地方管理局域名备案</li>
<li>备案完成！正式使用域名valpha.xyz来访问我的博客啦~</li>
</ul>
<p>6月30日，更改博客形式，改成使用BT面板，自行安装Wordpress的方式来部署博客</p>
<p>好处在于方便管理，自行决定服务器、数据库版本设置，也方便操作，从应用层面备份网站，不需要每次都是硬件级的备份（快照）</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>里程碑</tag>
      </tags>
  </entry>
</search>
